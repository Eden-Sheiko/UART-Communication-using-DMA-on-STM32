
F7_UART_WithDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800672c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  20000070  0800679c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  0800679c  00020998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001127b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002789  00000000  00000000  0003131b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00034738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275d5  00000000  00000000  000352c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104f6  00000000  00000000  0005c895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb3cd  00000000  00000000  0006cd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  001581a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065c0 	.word	0x080065c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080065c0 	.word	0x080065c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fdfb 	bl	80011b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f810 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f976 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 f932 	bl	800082c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f8a2 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f900 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d0:	f000 f86e 	bl	80006b0 <MX_UART4_Init>
  MX_USART6_UART_Init();
 80005d4:	f000 f8cc 	bl	8000770 <MX_USART6_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005d8:	f004 fea8 	bl	800532c <rtg_main>
 80005dc:	e7fc      	b.n	80005d8 <main+0x24>
	...

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 ffda 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f001 fe80 	bl	8002308 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <SystemClock_Config+0xc8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xcc>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000654:	2348      	movs	r3, #72	; 0x48
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800065c:	2303      	movs	r3, #3
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fe5f 	bl	8002328 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 fa16 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f8ed 	bl	8002870 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 fa00 	bl	8000aa0 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_UART4_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_UART4_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_UART4_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_UART4_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_UART4_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_UART4_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_UART4_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_UART4_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_UART4_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_UART4_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_UART4_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_UART4_Init+0x58>)
 80006f4:	f002 fed2 	bl	800349c <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f9cf 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40004c00 	.word	0x40004c00

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART3_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x58>)
 8000754:	f002 fea2 	bl	800349c <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f99f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000114 	.word	0x20000114
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART6_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART6_UART_Init+0x58>)
 80007b4:	f002 fe72 	bl	800349c <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f96f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000019c 	.word	0x2000019c
 80007cc:	40011400 	.word	0x40011400

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2206      	movs	r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	f001 fc2f 	bl	8002076 <HAL_PCD_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f93f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200003a4 	.word	0x200003a4

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_DMA_Init+0x80>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <MX_DMA_Init+0x80>)
 8000838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_DMA_Init+0x80>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_DMA_Init+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_DMA_Init+0x80>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_DMA_Init+0x80>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200d      	movs	r0, #13
 8000868:	f000 fdff 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800086c:	200d      	movs	r0, #13
 800086e:	f000 fe18 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	200f      	movs	r0, #15
 8000878:	f000 fdf7 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800087c:	200f      	movs	r0, #15
 800087e:	f000 fe10 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2039      	movs	r0, #57	; 0x39
 8000888:	f000 fdef 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800088c:	2039      	movs	r0, #57	; 0x39
 800088e:	f000 fe08 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2045      	movs	r0, #69	; 0x45
 8000898:	f000 fde7 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800089c:	2045      	movs	r0, #69	; 0x45
 800089e:	f000 fe00 	bl	80014a2 <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a6f      	ldr	r2, [pc, #444]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a69      	ldr	r2, [pc, #420]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a63      	ldr	r2, [pc, #396]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5d      	ldr	r2, [pc, #372]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b58      	ldr	r3, [pc, #352]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	; 0x4081
 800095c:	484b      	ldr	r0, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x1dc>)
 800095e:	f001 fb71 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	484a      	ldr	r0, [pc, #296]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000968:	f001 fb6c 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4844      	ldr	r0, [pc, #272]	; (8000a94 <MX_GPIO_Init+0x1e4>)
 8000984:	f001 f9b2 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000998:	230b      	movs	r3, #11
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	483c      	ldr	r0, [pc, #240]	; (8000a94 <MX_GPIO_Init+0x1e4>)
 80009a4:	f001 f9a2 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009a8:	2386      	movs	r3, #134	; 0x86
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b8:	230b      	movs	r3, #11
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4835      	ldr	r0, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x1e8>)
 80009c4:	f001 f992 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482a      	ldr	r0, [pc, #168]	; (8000a8c <MX_GPIO_Init+0x1dc>)
 80009e2:	f001 f983 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MX_GPIO_Init+0x1dc>)
 8000a04:	f001 f972 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000a20:	f001 f964 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000a38:	f001 f958 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_GPIO_Init+0x1ec>)
 8000a58:	f001 f948 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_GPIO_Init+0x1e0>)
 8000a7a:	f001 f937 	bl	8001cec <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ae      	sub	sp, #184	; 0xb8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	2284      	movs	r2, #132	; 0x84
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fd47 	bl	80055a8 <memset>
  if(huart->Instance==UART4)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a78      	ldr	r2, [pc, #480]	; (8000d00 <HAL_UART_MspInit+0x20c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	f040 80a2 	bne.w	8000c6a <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 f8c1 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000b40:	f7ff ffae 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b44:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a6e      	ldr	r2, [pc, #440]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b6c      	ldr	r3, [pc, #432]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a68      	ldr	r2, [pc, #416]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	485b      	ldr	r0, [pc, #364]	; (8000d08 <HAL_UART_MspInit+0x214>)
 8000b9c:	f001 f8a6 	bl	8001cec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000ba0:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000ba2:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <HAL_UART_MspInit+0x21c>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000ba6:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000ba8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc2:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc8:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000be0:	484a      	ldr	r0, [pc, #296]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000be2:	f000 fc79 	bl	80014d8 <HAL_DMA_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000bec:	f7ff ff58 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bf4:	675a      	str	r2, [r3, #116]	; 0x74
 8000bf6:	4a45      	ldr	r2, [pc, #276]	; (8000d0c <HAL_UART_MspInit+0x218>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <HAL_UART_MspInit+0x224>)
 8000c00:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0a:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c0c:	2240      	movs	r2, #64	; 0x40
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c16:	4b3f      	ldr	r3, [pc, #252]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c24:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000c3c:	4835      	ldr	r0, [pc, #212]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c3e:	f000 fc4b 	bl	80014d8 <HAL_DMA_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000c48:	f7ff ff2a 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c50:	671a      	str	r2, [r3, #112]	; 0x70
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <HAL_UART_MspInit+0x220>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2034      	movs	r0, #52	; 0x34
 8000c5e:	f000 fc04 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c62:	2034      	movs	r0, #52	; 0x34
 8000c64:	f000 fc1d 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000c68:	e102      	b.n	8000e70 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_UART_MspInit+0x228>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d157      	bne.n	8000d24 <HAL_UART_MspInit+0x230>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c78:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f81a 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8000c8e:	f7ff ff07 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_UART_MspInit+0x210>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <HAL_UART_MspInit+0x22c>)
 8000cea:	f000 ffff 	bl	8001cec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2027      	movs	r0, #39	; 0x27
 8000cf4:	f000 fbb9 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf8:	2027      	movs	r0, #39	; 0x27
 8000cfa:	f000 fbd2 	bl	80014a2 <HAL_NVIC_EnableIRQ>
}
 8000cfe:	e0b7      	b.n	8000e70 <HAL_UART_MspInit+0x37c>
 8000d00:	40004c00 	.word	0x40004c00
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	20000224 	.word	0x20000224
 8000d10:	40026040 	.word	0x40026040
 8000d14:	20000284 	.word	0x20000284
 8000d18:	40026070 	.word	0x40026070
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <HAL_UART_MspInit+0x384>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	f040 80a0 	bne.w	8000e70 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d36:	2300      	movs	r3, #0
 8000d38:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 ffbc 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8000d4a:	f7ff fea9 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a4a      	ldr	r2, [pc, #296]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <HAL_UART_MspInit+0x388>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7e:	23c0      	movs	r3, #192	; 0xc0
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d96:	2308      	movs	r3, #8
 8000d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4837      	ldr	r0, [pc, #220]	; (8000e80 <HAL_UART_MspInit+0x38c>)
 8000da4:	f000 ffa2 	bl	8001cec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <HAL_UART_MspInit+0x394>)
 8000dac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000db0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000db4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000de8:	4826      	ldr	r0, [pc, #152]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dea:	f000 fb75 	bl	80014d8 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x304>
      Error_Handler();
 8000df4:	f7ff fe54 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000dfc:	675a      	str	r2, [r3, #116]	; 0x74
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_UART_MspInit+0x390>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <HAL_UART_MspInit+0x39c>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e0c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000e44:	4811      	ldr	r0, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e46:	f000 fb47 	bl	80014d8 <HAL_DMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x360>
      Error_Handler();
 8000e50:	f7ff fe26 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e58:	671a      	str	r2, [r3, #112]	; 0x70
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_UART_MspInit+0x398>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2047      	movs	r0, #71	; 0x47
 8000e66:	f000 fb00 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e6a:	2047      	movs	r0, #71	; 0x47
 8000e6c:	f000 fb19 	bl	80014a2 <HAL_NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	37b8      	adds	r7, #184	; 0xb8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	200002e4 	.word	0x200002e4
 8000e88:	40026428 	.word	0x40026428
 8000e8c:	20000344 	.word	0x20000344
 8000e90:	400264a0 	.word	0x400264a0

08000e94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ac      	sub	sp, #176	; 0xb0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	2284      	movs	r2, #132	; 0x84
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fb77 	bl	80055a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ec2:	d159      	bne.n	8000f78 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fef1 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ee0:	f7ff fdde 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f16:	230a      	movs	r3, #10
 8000f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f20:	4619      	mov	r1, r3
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <HAL_PCD_MspInit+0xf0>)
 8000f24:	f000 fee2 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <HAL_PCD_MspInit+0xf0>)
 8000f44:	f000 fed2 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f52:	6353      	str	r3, [r2, #52]	; 0x34
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_PCD_MspInit+0xec>)
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	37b0      	adds	r7, #176	; 0xb0
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f92a 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Stream2_IRQHandler+0x10>)
 8000fe2:	f000 fc19 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000224 	.word	0x20000224

08000ff0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Stream4_IRQHandler+0x10>)
 8000ff6:	f000 fc0f 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000284 	.word	0x20000284

08001004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART3_IRQHandler+0x10>)
 800100a:	f002 fc9d 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000114 	.word	0x20000114

08001018 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <UART4_IRQHandler+0x10>)
 800101e:	f002 fc93 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000008c 	.word	0x2000008c

0800102c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream1_IRQHandler+0x10>)
 8001032:	f000 fbf1 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002e4 	.word	0x200002e4

08001040 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA2_Stream6_IRQHandler+0x10>)
 8001046:	f000 fbe7 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000344 	.word	0x20000344

08001054 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART6_IRQHandler+0x10>)
 800105a:	f002 fc75 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000019c 	.word	0x2000019c

08001068 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001090:	605a      	str	r2, [r3, #4]
	return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_isatty>:

int _isatty(int file)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f004 fa18 	bl	8005534 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20050000 	.word	0x20050000
 8001130:	00000400 	.word	0x00000400
 8001134:	200008ac 	.word	0x200008ac
 8001138:	20000998 	.word	0x20000998

0800113c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001166:	490e      	ldr	r1, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800117c:	4c0b      	ldr	r4, [pc, #44]	; (80011ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118a:	f7ff ffd7 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f004 f9d7 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fa0f 	bl	80005b4 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011a4:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 80011a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ac:	20000998 	.word	0x20000998

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>

080011b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f94c 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f805 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c2:	f7ff fc73 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f967 	bl	80014be <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f92f 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20000008 	.word	0x20000008
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	200008b0 	.word	0x200008b0

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200008b0 	.word	0x200008b0

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	05fa0000 	.word	0x05fa0000

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <__NVIC_EnableIRQ+0x38>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff29 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff3e 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff8e 	bl	80013a8 <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5d 	bl	8001354 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff31 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff feb6 	bl	8001254 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e099      	b.n	8001628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001514:	e00f      	b.n	8001536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001516:	f7ff fe9d 	bl	8001254 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b05      	cmp	r3, #5
 8001522:	d908      	bls.n	8001536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2220      	movs	r2, #32
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e078      	b.n	8001628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e8      	bne.n	8001516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_DMA_Init+0x158>)
 8001550:	4013      	ands	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4313      	orrs	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	2b04      	cmp	r3, #4
 800158e:	d107      	bne.n	80015a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4313      	orrs	r3, r2
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f023 0307 	bic.w	r3, r3, #7
 80015b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4313      	orrs	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d117      	bne.n	80015fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00e      	beq.n	80015fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fb09 	bl	8001bf4 <DMA_CheckFifoParam>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015f6:	2301      	movs	r3, #1
 80015f8:	e016      	b.n	8001628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fac0 	bl	8001b88 <DMA_CalcBaseAndBitshift>
 8001608:	4603      	mov	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	223f      	movs	r2, #63	; 0x3f
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	f010803f 	.word	0xf010803f

08001634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_DMA_Start_IT+0x26>
 8001656:	2302      	movs	r3, #2
 8001658:	e048      	b.n	80016ec <HAL_DMA_Start_IT+0xb8>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d137      	bne.n	80016de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fa52 	bl	8001b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	409a      	lsls	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0216 	orr.w	r2, r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0208 	orr.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e005      	b.n	80016ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016e6:	2302      	movs	r3, #2
 80016e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001702:	f7ff fda7 	bl	8001254 <HAL_GetTick>
 8001706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d008      	beq.n	8001726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e052      	b.n	80017cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0216 	bic.w	r2, r2, #22
 8001734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <HAL_DMA_Abort+0x62>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0208 	bic.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001776:	e013      	b.n	80017a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001778:	f7ff fd6c 	bl	8001254 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b05      	cmp	r3, #5
 8001784:	d90c      	bls.n	80017a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e015      	b.n	80017cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1e4      	bne.n	8001778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b2:	223f      	movs	r2, #63	; 0x3f
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d004      	beq.n	80017f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00c      	b.n	800180c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2205      	movs	r2, #5
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001824:	4b8e      	ldr	r3, [pc, #568]	; (8001a60 <HAL_DMA_IRQHandler+0x248>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a8e      	ldr	r2, [pc, #568]	; (8001a64 <HAL_DMA_IRQHandler+0x24c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0a9b      	lsrs	r3, r3, #10
 8001830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2208      	movs	r2, #8
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01a      	beq.n	8001884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0204 	bic.w	r2, r2, #4
 800186a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2208      	movs	r2, #8
 8001872:	409a      	lsls	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2201      	movs	r2, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d012      	beq.n	80018ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f043 0202 	orr.w	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2204      	movs	r2, #4
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d012      	beq.n	80018f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00b      	beq.n	80018f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2204      	movs	r2, #4
 80018de:	409a      	lsls	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2210      	movs	r2, #16
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d043      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03c      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	2210      	movs	r2, #16
 8001914:	409a      	lsls	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d018      	beq.n	800195a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d108      	bne.n	8001948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d024      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
 8001946:	e01f      	b.n	8001988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01b      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
 8001958:	e016      	b.n	8001988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0208 	bic.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	2220      	movs	r2, #32
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 808f 	beq.w	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8087 	beq.w	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2220      	movs	r2, #32
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d136      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0216 	bic.w	r2, r2, #22
 80019d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x1da>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0208 	bic.w	r2, r2, #8
 8001a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	223f      	movs	r2, #63	; 0x3f
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d07e      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
        }
        return;
 8001a2e:	e079      	b.n	8001b24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d031      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
 8001a5c:	e02c      	b.n	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000
 8001a64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d023      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e01e      	b.n	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10f      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0210 	bic.w	r2, r2, #16
 8001a96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d032      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2205      	movs	r2, #5
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d307      	bcc.n	8001b00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f2      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x2cc>
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b24:	bf00      	nop
    }
  }
}
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d108      	bne.n	8001b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b6a:	e007      	b.n	8001b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3b10      	subs	r3, #16
 8001b98:	4a13      	ldr	r2, [pc, #76]	; (8001be8 <DMA_CalcBaseAndBitshift+0x60>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <DMA_CalcBaseAndBitshift+0x64>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d908      	bls.n	8001bc8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
 8001bc6:	e006      	b.n	8001bd6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	aaaaaaab 	.word	0xaaaaaaab
 8001bec:	0800667c 	.word	0x0800667c
 8001bf0:	fffffc00 	.word	0xfffffc00

08001bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d856      	bhi.n	8001cc2 <DMA_CheckFifoParam+0xce>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <DMA_CheckFifoParam+0x28>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c3f 	.word	0x08001c3f
 8001c24:	08001c2d 	.word	0x08001c2d
 8001c28:	08001cc3 	.word	0x08001cc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d046      	beq.n	8001cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e043      	b.n	8001cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c46:	d140      	bne.n	8001cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e03d      	b.n	8001cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c56:	d121      	bne.n	8001c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d837      	bhi.n	8001cce <DMA_CheckFifoParam+0xda>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <DMA_CheckFifoParam+0x70>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c7b 	.word	0x08001c7b
 8001c6c:	08001c75 	.word	0x08001c75
 8001c70:	08001c8d 	.word	0x08001c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      break;
 8001c78:	e030      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d025      	beq.n	8001cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8a:	e022      	b.n	8001cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c94:	d11f      	bne.n	8001cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9a:	e01c      	b.n	8001cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d903      	bls.n	8001caa <DMA_CheckFifoParam+0xb6>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d003      	beq.n	8001cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca8:	e018      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      break;
 8001cae:	e015      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc0:	e00b      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e00a      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e008      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e006      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e004      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e002      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cd6:	bf00      	nop
 8001cd8:	e000      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
    }
  } 
  
  return status; 
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e175      	b.n	8001ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8164 	bne.w	8001ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x56>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d037      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_GPIO_Init+0x330>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x236>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x338>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x232>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x33c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a53      	ldr	r2, [pc, #332]	; (800202c <HAL_GPIO_Init+0x340>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x344>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x348>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x34c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x350>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e012      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e010      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae86 	bls.w	8001d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40022000 	.word	0x40022000
 800203c:	40022400 	.word	0x40022400
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002078:	b08f      	sub	sp, #60	; 0x3c
 800207a:	af0a      	add	r7, sp, #40	; 0x28
 800207c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e116      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fef6 	bl	8000e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fe56 	bl	8004d78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	687e      	ldr	r6, [r7, #4]
 80020d4:	466d      	mov	r5, sp
 80020d6:	f106 0410 	add.w	r4, r6, #16
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ea:	1d33      	adds	r3, r6, #4
 80020ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	f002 fdea 	bl	8004cc8 <USB_CoreInit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0d7      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fe44 	bl	8004d9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e04a      	b.n	80021ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	333d      	adds	r3, #61	; 0x3d
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	333c      	adds	r3, #60	; 0x3c
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	b298      	uxth	r0, r3
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3344      	adds	r3, #68	; 0x44
 8002154:	4602      	mov	r2, r0
 8002156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3340      	adds	r3, #64	; 0x40
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3348      	adds	r3, #72	; 0x48
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	334c      	adds	r3, #76	; 0x4c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3354      	adds	r3, #84	; 0x54
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	3301      	adds	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3af      	bcc.n	8002118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e044      	b.n	8002248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	3301      	adds	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3b5      	bcc.n	80021be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	687e      	ldr	r6, [r7, #4]
 800225a:	466d      	mov	r5, sp
 800225c:	f106 0410 	add.w	r4, r6, #16
 8002260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002270:	1d33      	adds	r3, r6, #4
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f002 fddd 	bl	8004e34 <USB_DevInit>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e014      	b.n	80022b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f80b 	bl	80022c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 ff9b 	bl	80051ea <USB_DevDisconnect>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_PCDEx_ActivateLPM+0x44>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	10000003 	.word	0x10000003

08002308 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000

08002328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e291      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800234c:	4b96      	ldr	r3, [pc, #600]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00c      	beq.n	8002372 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002358:	4b93      	ldr	r3, [pc, #588]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d112      	bne.n	800238a <HAL_RCC_OscConfig+0x62>
 8002364:	4b90      	ldr	r3, [pc, #576]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002370:	d10b      	bne.n	800238a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002372:	4b8d      	ldr	r3, [pc, #564]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d06c      	beq.n	8002458 <HAL_RCC_OscConfig+0x130>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d168      	bne.n	8002458 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e26b      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x7a>
 8002394:	4b84      	ldr	r3, [pc, #528]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a83      	ldr	r2, [pc, #524]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e02e      	b.n	8002400 <HAL_RCC_OscConfig+0xd8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x9c>
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7b      	ldr	r2, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0xd8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0xc0>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xd8>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b6c      	ldr	r3, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6b      	ldr	r2, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe ff24 	bl	8001254 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe ff20 	bl	8001254 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e21f      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xe8>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe ff10 	bl	8001254 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe ff0c 	bl	8001254 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e20b      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x110>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d069      	beq.n	800253a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x190>
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d116      	bne.n	80024b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e1df      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	493d      	ldr	r1, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	e040      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fec2 	bl	8001254 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe febe 	bl	8001254 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1bd      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4929      	ldr	r1, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
 8002506:	e018      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fe9e 	bl	8001254 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fe9a 	bl	8001254 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e199      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d038      	beq.n	80025b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d019      	beq.n	8002582 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fe7b 	bl	8001254 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002562:	f7fe fe77 	bl	8001254 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e176      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x23a>
 8002580:	e01a      	b.n	80025b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_RCC_OscConfig+0x280>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fe61 	bl	8001254 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe fe5d 	bl	8001254 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d903      	bls.n	80025ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e15c      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
 80025a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a4 	beq.w	800270e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b8b      	ldr	r3, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a87      	ldr	r2, [pc, #540]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	4b82      	ldr	r3, [pc, #520]	; (80027f8 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025fa:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe fe25 	bl	8001254 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe fe21 	bl	8001254 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e120      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002620:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4d0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x31a>
 8002634:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	e02d      	b.n	800269e <HAL_RCC_OscConfig+0x376>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x33c>
 800264a:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x376>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x35e>
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a60      	ldr	r2, [pc, #384]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x376>
 8002686:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a5a      	ldr	r2, [pc, #360]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fe fdd5 	bl	8001254 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fdd1 	bl	8001254 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0ce      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b4b      	ldr	r3, [pc, #300]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x386>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fdbf 	bl	8001254 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fdbb 	bl	8001254 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0b8      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a4 	beq.w	8002860 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d06b      	beq.n	80027fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d149      	bne.n	80027c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a30      	ldr	r2, [pc, #192]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd8c 	bl	8001254 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fd88 	bl	8001254 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e087      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	4313      	orrs	r3, r2
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800278a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fd5c 	bl	8001254 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fd58 	bl	8001254 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e057      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x478>
 80027be:	e04f      	b.n	8002860 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd42 	bl	8001254 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fd3e 	bl	8001254 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e03d      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4ac>
 80027f2:	e035      	b.n	8002860 <HAL_RCC_OscConfig+0x538>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x544>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d028      	beq.n	800285c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d121      	bne.n	800285c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11a      	bne.n	800285c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002832:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d0      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4965      	ldr	r1, [pc, #404]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d040      	beq.n	8002994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d115      	bne.n	8002952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e073      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06b      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4936      	ldr	r1, [pc, #216]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fc76 	bl	8001254 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fc72 	bl	8001254 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e053      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d210      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 020f 	bic.w	r2, r3, #15
 80029aa:	4922      	ldr	r1, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1cc>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1d0>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1d4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fbd2 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08006664 	.word	0x08006664
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b094      	sub	sp, #80	; 0x50
 8002a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	2300      	movs	r3, #0
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	f200 80e1 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x34>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7a:	e0db      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a80:	e0db      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a86:	e0d8      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aba:	4622      	mov	r2, r4
 8002abc:	462b      	mov	r3, r5
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	0159      	lsls	r1, r3, #5
 8002ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002acc:	0150      	lsls	r0, r2, #5
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	1a51      	subs	r1, r2, r1
 8002ad6:	6139      	str	r1, [r7, #16]
 8002ad8:	4629      	mov	r1, r5
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aec:	4659      	mov	r1, fp
 8002aee:	018b      	lsls	r3, r1, #6
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af6:	4651      	mov	r1, sl
 8002af8:	018a      	lsls	r2, r1, #6
 8002afa:	4651      	mov	r1, sl
 8002afc:	ebb2 0801 	subs.w	r8, r2, r1
 8002b00:	4659      	mov	r1, fp
 8002b02:	eb63 0901 	sbc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	462b      	mov	r3, r5
 8002b28:	eb49 0303 	adc.w	r3, r9, r3
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	024b      	lsls	r3, r1, #9
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b44:	4621      	mov	r1, r4
 8002b46:	024a      	lsls	r2, r1, #9
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b58:	f7fd fbaa 	bl	80002b0 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b64:	e058      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4611      	mov	r1, r2
 8002b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	0159      	lsls	r1, r3, #5
 8002b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b92:	0150      	lsls	r0, r2, #5
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	00eb      	lsls	r3, r5, #3
 8002bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	18e3      	adds	r3, r4, r3
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	464b      	mov	r3, r9
 8002bdc:	eb45 0303 	adc.w	r3, r5, r3
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	028b      	lsls	r3, r1, #10
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	028a      	lsls	r2, r1, #10
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	61fa      	str	r2, [r7, #28]
 8002c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0c:	f7fd fb50 	bl	80002b0 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3750      	adds	r7, #80	; 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08006674 	.word	0x08006674

08002c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c98:	f7ff ffdc 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08006674 	.word	0x08006674

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ce4:	4b69      	ldr	r3, [pc, #420]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a68      	ldr	r2, [pc, #416]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cee:	6093      	str	r3, [r2, #8]
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	4964      	ldr	r1, [pc, #400]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d017      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	4959      	ldr	r1, [pc, #356]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d52:	4b4e      	ldr	r3, [pc, #312]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	494a      	ldr	r1, [pc, #296]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 808b 	beq.w	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a34      	ldr	r2, [pc, #208]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fa46 	bl	8001254 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fa42 	bl	8001254 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e357      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dea:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d035      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d02e      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d114      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fa0a 	bl	8001254 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe fa06 	bl	8001254 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e319      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e72:	d111      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e82:	400b      	ands	r3, r1
 8002e84:	4901      	ldr	r1, [pc, #4]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40007000 	.word	0x40007000
 8002e94:	0ffffcff 	.word	0x0ffffcff
 8002e98:	4baa      	ldr	r3, [pc, #680]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4aa9      	ldr	r2, [pc, #676]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ea2:	6093      	str	r3, [r2, #8]
 8002ea4:	4ba7      	ldr	r3, [pc, #668]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	49a4      	ldr	r1, [pc, #656]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ec2:	4ba0      	ldr	r3, [pc, #640]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec8:	4a9e      	ldr	r2, [pc, #632]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ed2:	4b9c      	ldr	r3, [pc, #624]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	4999      	ldr	r1, [pc, #612]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef0:	4b94      	ldr	r3, [pc, #592]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efe:	4991      	ldr	r1, [pc, #580]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f12:	4b8c      	ldr	r3, [pc, #560]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f20:	4988      	ldr	r1, [pc, #544]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f34:	4b83      	ldr	r3, [pc, #524]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f42:	4980      	ldr	r1, [pc, #512]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f56:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4977      	ldr	r1, [pc, #476]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f78:	4b72      	ldr	r3, [pc, #456]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	496f      	ldr	r1, [pc, #444]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f023 020c 	bic.w	r2, r3, #12
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	4966      	ldr	r1, [pc, #408]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	495e      	ldr	r1, [pc, #376]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fec:	4955      	ldr	r1, [pc, #340]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	4944      	ldr	r1, [pc, #272]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	493c      	ldr	r1, [pc, #240]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	4933      	ldr	r1, [pc, #204]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003096:	492b      	ldr	r1, [pc, #172]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d011      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b8:	4922      	ldr	r1, [pc, #136]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c8:	d101      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	4912      	ldr	r1, [pc, #72]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311c:	4909      	ldr	r1, [pc, #36]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d006      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80d9 	beq.w	80032ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003138:	4b02      	ldr	r3, [pc, #8]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a01      	ldr	r2, [pc, #4]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003144:	40023800 	.word	0x40023800
 8003148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314a:	f7fe f883 	bl	8001254 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003152:	f7fe f87f 	bl	8001254 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	d901      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e194      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003164:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d021      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11d      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	019a      	lsls	r2, r3, #6
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	071b      	lsls	r3, r3, #28
 80031b8:	4957      	ldr	r1, [pc, #348]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d129      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031ec:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003200:	0f1b      	lsrs	r3, r3, #28
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	019a      	lsls	r2, r3, #6
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	071b      	lsls	r3, r3, #28
 8003220:	493d      	ldr	r1, [pc, #244]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800322e:	f023 021f 	bic.w	r2, r3, #31
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	3b01      	subs	r3, #1
 8003238:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01d      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003252:	0e1b      	lsrs	r3, r3, #24
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	0f1b      	lsrs	r3, r3, #28
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	019a      	lsls	r2, r3, #6
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	071b      	lsls	r3, r3, #28
 8003280:	4925      	ldr	r1, [pc, #148]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d011      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	019a      	lsls	r2, r3, #6
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	071b      	lsls	r3, r3, #28
 80032b0:	4919      	ldr	r1, [pc, #100]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fd ffc6 	bl	8001254 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032cc:	f7fd ffc2 	bl	8001254 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0d7      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f040 80cd 	bne.w	800348c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd ffa9 	bl	8001254 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003306:	f7fd ffa5 	bl	8001254 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d903      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0ba      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003318:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800331c:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003328:	d0ed      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02e      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d12a      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	0f1b      	lsrs	r3, r3, #28
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	019a      	lsls	r2, r3, #6
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	061b      	lsls	r3, r3, #24
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	071b      	lsls	r3, r3, #28
 8003386:	4944      	ldr	r1, [pc, #272]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800338e:	4b42      	ldr	r3, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003394:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	493d      	ldr	r1, [pc, #244]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033bc:	d11d      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	0e1b      	lsrs	r3, r3, #24
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033cc:	4b32      	ldr	r3, [pc, #200]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	0f1b      	lsrs	r3, r3, #28
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	019a      	lsls	r2, r3, #6
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	431a      	orrs	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	4929      	ldr	r1, [pc, #164]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d028      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	0e1b      	lsrs	r3, r3, #24
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	019a      	lsls	r2, r3, #6
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	071b      	lsls	r3, r3, #28
 800343a:	4917      	ldr	r1, [pc, #92]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4911      	ldr	r1, [pc, #68]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fd fef6 	bl	8001254 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800346c:	f7fd fef2 	bl	8001254 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e007      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d1ef      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e040      	b.n	8003530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fb18 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fd3a 	bl	8003f54 <UART_SetConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e022      	b.n	8003530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 ff92 	bl	800441c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 f819 	bl	8004560 <UART_CheckIdleState>
 800352e:	4603      	mov	r3, r0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354c:	2b20      	cmp	r3, #32
 800354e:	d171      	bne.n	8003634 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_UART_Transmit+0x24>
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e06a      	b.n	8003636 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2221      	movs	r2, #33	; 0x21
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356e:	f7fd fe71 	bl	8001254 <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Transmit+0x68>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a8:	e02c      	b.n	8003604 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f001 f80a 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e038      	b.n	8003636 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3302      	adds	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e007      	b.n	80035f2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	3301      	adds	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1cc      	bne.n	80035aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2200      	movs	r2, #0
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 ffd7 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e005      	b.n	8003636 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	; 0x28
 8003642:	af02      	add	r7, sp, #8
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003654:	2b20      	cmp	r3, #32
 8003656:	f040 80b1 	bne.w	80037bc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_UART_Receive+0x28>
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e0a9      	b.n	80037be <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2222      	movs	r2, #34	; 0x22
 8003676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003680:	f7fd fde8 	bl	8001254 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	88fa      	ldrh	r2, [r7, #6]
 8003692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	d10e      	bne.n	80036be <HAL_UART_Receive+0x80>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_UART_Receive+0x76>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b2:	e02d      	b.n	8003710 <HAL_UART_Receive+0xd2>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	22ff      	movs	r2, #255	; 0xff
 80036b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036bc:	e028      	b.n	8003710 <HAL_UART_Receive+0xd2>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_UART_Receive+0xa4>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Receive+0x9a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d6:	e01b      	b.n	8003710 <HAL_UART_Receive+0xd2>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	227f      	movs	r2, #127	; 0x7f
 80036dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036e0:	e016      	b.n	8003710 <HAL_UART_Receive+0xd2>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ea:	d10d      	bne.n	8003708 <HAL_UART_Receive+0xca>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_UART_Receive+0xc0>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	227f      	movs	r2, #127	; 0x7f
 80036f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036fc:	e008      	b.n	8003710 <HAL_UART_Receive+0xd2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003706:	e003      	b.n	8003710 <HAL_UART_Receive+0xd2>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003716:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d108      	bne.n	8003734 <HAL_UART_Receive+0xf6>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e003      	b.n	800373c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800373c:	e032      	b.n	80037a4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	2120      	movs	r1, #32
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 ff40 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e032      	b.n	80037be <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10c      	bne.n	8003778 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	b29a      	uxth	r2, r3
 8003766:	8a7b      	ldrh	r3, [r7, #18]
 8003768:	4013      	ands	r3, r2
 800376a:	b29a      	uxth	r2, r3
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	3302      	adds	r3, #2
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e00c      	b.n	8003792 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2da      	uxtb	r2, r3
 8003780:	8a7b      	ldrh	r3, [r7, #18]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4013      	ands	r3, r2
 8003786:	b2da      	uxtb	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1c6      	bne.n	800373e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d165      	bne.n	80038aa <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Transmit_DMA+0x22>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e05e      	b.n	80038ac <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	2b00      	cmp	r3, #0
 8003818:	d027      	beq.n	800386a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <HAL_UART_Transmit_DMA+0xec>)
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <HAL_UART_Transmit_DMA+0xf0>)
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_UART_Transmit_DMA+0xf4>)
 8003830:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	2200      	movs	r2, #0
 8003838:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	4619      	mov	r1, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3328      	adds	r3, #40	; 0x28
 800384a:	461a      	mov	r2, r3
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	f7fd fef1 	bl	8001634 <HAL_DMA_Start_IT>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2210      	movs	r2, #16
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e020      	b.n	80038ac <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2240      	movs	r2, #64	; 0x40
 8003870:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	613b      	str	r3, [r7, #16]
   return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003892:	623a      	str	r2, [r7, #32]
 8003894:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	69f9      	ldr	r1, [r7, #28]
 8003898:	6a3a      	ldr	r2, [r7, #32]
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	080049b1 	.word	0x080049b1
 80038b8:	08004a47 	.word	0x08004a47
 80038bc:	08004bc9 	.word	0x08004bc9

080038c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d132      	bne.n	800393e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Receive_DMA+0x24>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e02b      	b.n	8003940 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d018      	beq.n	800392e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	613b      	str	r3, [r7, #16]
   return(result);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	69f9      	ldr	r1, [r7, #28]
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	61bb      	str	r3, [r7, #24]
   return(result);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e6      	bne.n	80038fc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	461a      	mov	r2, r3
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 ff11 	bl	800475c <UART_Start_Receive_DMA>
 800393a:	4603      	mov	r3, r0
 800393c:	e000      	b.n	8003940 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0ba      	sub	sp, #232	; 0xe8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800396e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003972:	f640 030f 	movw	r3, #2063	; 0x80f
 8003976:	4013      	ands	r3, r2
 8003978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800397c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d115      	bne.n	80039b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8297 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
      }
      return;
 80039ae:	e291      	b.n	8003ed4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8117 	beq.w	8003be8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_UART_IRQHandler+0x298>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 810a 	beq.w	8003be8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d011      	beq.n	8003a04 <HAL_UART_IRQHandler+0xbc>
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <HAL_UART_IRQHandler+0xec>
 8003a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2202      	movs	r2, #2
 8003a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d011      	beq.n	8003a64 <HAL_UART_IRQHandler+0x11c>
 8003a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2204      	movs	r2, #4
 8003a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d017      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a96:	f043 0208 	orr.w	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x18a>
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 81fd 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d005      	beq.n	8003b2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04f      	beq.n	8003bca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fedc 	bl	80048e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d141      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1d9      	bne.n	8003b3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_UART_IRQHandler+0x29c>)
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fe18 	bl	80017d4 <HAL_DMA_Abort_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00f      	b.n	8003bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9b4 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00b      	b.n	8003bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9b0 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e007      	b.n	8003bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9ac 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003bd8:	e17e      	b.n	8003ed8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bda:	bf00      	nop
    return;
 8003bdc:	e17c      	b.n	8003ed8 <HAL_UART_IRQHandler+0x590>
 8003bde:	bf00      	nop
 8003be0:	04000120 	.word	0x04000120
 8003be4:	08004c47 	.word	0x08004c47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 814c 	bne.w	8003e8a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8145 	beq.w	8003e8a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 813e 	beq.w	8003e8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	f040 80b6 	bne.w	8003d92 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8150 	beq.w	8003edc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c46:	429a      	cmp	r2, r3
 8003c48:	f080 8148 	bcs.w	8003edc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	f000 8086 	beq.w	8003d70 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1da      	bne.n	8003c64 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e1      	bne.n	8003cae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e3      	bne.n	8003cea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e4      	bne.n	8003d30 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fcc2 	bl	80016f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8d6 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d90:	e0a4      	b.n	8003edc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8096 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8091 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
 8003de2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e4      	bne.n	8003dbe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	623b      	str	r3, [r7, #32]
   return(result);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e18:	633a      	str	r2, [r7, #48]	; 0x30
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f023 0310 	bic.w	r3, r3, #16
 8003e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	69b9      	ldr	r1, [r7, #24]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e4      	bne.n	8003e40 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f85a 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e88:	e02a      	b.n	8003ee0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00e      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01c      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
    }
    return;
 8003eb2:	e017      	b.n	8003ee4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fed0 	bl	8004c72 <UART_EndTransmit_IT>
    return;
 8003ed2:	e008      	b.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003ed4:	bf00      	nop
 8003ed6:	e006      	b.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003ee4:	bf00      	nop
  }

}
 8003ee6:	37e8      	adds	r7, #232	; 0xe8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4ba6      	ldr	r3, [pc, #664]	; (8004218 <UART_SetConfig+0x2c4>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	6979      	ldr	r1, [r7, #20]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a94      	ldr	r2, [pc, #592]	; (800421c <UART_SetConfig+0x2c8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d120      	bne.n	8004012 <UART_SetConfig+0xbe>
 8003fd0:	4b93      	ldr	r3, [pc, #588]	; (8004220 <UART_SetConfig+0x2cc>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d816      	bhi.n	800400c <UART_SetConfig+0xb8>
 8003fde:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0x90>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08003ff5 	.word	0x08003ff5
 8003fe8:	08004001 	.word	0x08004001
 8003fec:	08003ffb 	.word	0x08003ffb
 8003ff0:	08004007 	.word	0x08004007
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e150      	b.n	800429c <UART_SetConfig+0x348>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e14d      	b.n	800429c <UART_SetConfig+0x348>
 8004000:	2304      	movs	r3, #4
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e14a      	b.n	800429c <UART_SetConfig+0x348>
 8004006:	2308      	movs	r3, #8
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e147      	b.n	800429c <UART_SetConfig+0x348>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e144      	b.n	800429c <UART_SetConfig+0x348>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a83      	ldr	r2, [pc, #524]	; (8004224 <UART_SetConfig+0x2d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d132      	bne.n	8004082 <UART_SetConfig+0x12e>
 800401c:	4b80      	ldr	r3, [pc, #512]	; (8004220 <UART_SetConfig+0x2cc>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d828      	bhi.n	800407c <UART_SetConfig+0x128>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0xdc>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004065 	.word	0x08004065
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800407d 	.word	0x0800407d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	08004071 	.word	0x08004071
 8004044:	0800407d 	.word	0x0800407d
 8004048:	0800407d 	.word	0x0800407d
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800406b 	.word	0x0800406b
 8004054:	0800407d 	.word	0x0800407d
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800407d 	.word	0x0800407d
 8004060:	08004077 	.word	0x08004077
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e118      	b.n	800429c <UART_SetConfig+0x348>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e115      	b.n	800429c <UART_SetConfig+0x348>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e112      	b.n	800429c <UART_SetConfig+0x348>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e10f      	b.n	800429c <UART_SetConfig+0x348>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e10c      	b.n	800429c <UART_SetConfig+0x348>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a68      	ldr	r2, [pc, #416]	; (8004228 <UART_SetConfig+0x2d4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d120      	bne.n	80040ce <UART_SetConfig+0x17a>
 800408c:	4b64      	ldr	r3, [pc, #400]	; (8004220 <UART_SetConfig+0x2cc>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004096:	2b30      	cmp	r3, #48	; 0x30
 8004098:	d013      	beq.n	80040c2 <UART_SetConfig+0x16e>
 800409a:	2b30      	cmp	r3, #48	; 0x30
 800409c:	d814      	bhi.n	80040c8 <UART_SetConfig+0x174>
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d009      	beq.n	80040b6 <UART_SetConfig+0x162>
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d810      	bhi.n	80040c8 <UART_SetConfig+0x174>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <UART_SetConfig+0x15c>
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d006      	beq.n	80040bc <UART_SetConfig+0x168>
 80040ae:	e00b      	b.n	80040c8 <UART_SetConfig+0x174>
 80040b0:	2300      	movs	r3, #0
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e0f2      	b.n	800429c <UART_SetConfig+0x348>
 80040b6:	2302      	movs	r3, #2
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e0ef      	b.n	800429c <UART_SetConfig+0x348>
 80040bc:	2304      	movs	r3, #4
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e0ec      	b.n	800429c <UART_SetConfig+0x348>
 80040c2:	2308      	movs	r3, #8
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e0e9      	b.n	800429c <UART_SetConfig+0x348>
 80040c8:	2310      	movs	r3, #16
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e0e6      	b.n	800429c <UART_SetConfig+0x348>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a56      	ldr	r2, [pc, #344]	; (800422c <UART_SetConfig+0x2d8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d120      	bne.n	800411a <UART_SetConfig+0x1c6>
 80040d8:	4b51      	ldr	r3, [pc, #324]	; (8004220 <UART_SetConfig+0x2cc>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e2:	2bc0      	cmp	r3, #192	; 0xc0
 80040e4:	d013      	beq.n	800410e <UART_SetConfig+0x1ba>
 80040e6:	2bc0      	cmp	r3, #192	; 0xc0
 80040e8:	d814      	bhi.n	8004114 <UART_SetConfig+0x1c0>
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d009      	beq.n	8004102 <UART_SetConfig+0x1ae>
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d810      	bhi.n	8004114 <UART_SetConfig+0x1c0>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <UART_SetConfig+0x1a8>
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d006      	beq.n	8004108 <UART_SetConfig+0x1b4>
 80040fa:	e00b      	b.n	8004114 <UART_SetConfig+0x1c0>
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e0cc      	b.n	800429c <UART_SetConfig+0x348>
 8004102:	2302      	movs	r3, #2
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e0c9      	b.n	800429c <UART_SetConfig+0x348>
 8004108:	2304      	movs	r3, #4
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e0c6      	b.n	800429c <UART_SetConfig+0x348>
 800410e:	2308      	movs	r3, #8
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e0c3      	b.n	800429c <UART_SetConfig+0x348>
 8004114:	2310      	movs	r3, #16
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e0c0      	b.n	800429c <UART_SetConfig+0x348>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a44      	ldr	r2, [pc, #272]	; (8004230 <UART_SetConfig+0x2dc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d125      	bne.n	8004170 <UART_SetConfig+0x21c>
 8004124:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <UART_SetConfig+0x2cc>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004132:	d017      	beq.n	8004164 <UART_SetConfig+0x210>
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d817      	bhi.n	800416a <UART_SetConfig+0x216>
 800413a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413e:	d00b      	beq.n	8004158 <UART_SetConfig+0x204>
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d811      	bhi.n	800416a <UART_SetConfig+0x216>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <UART_SetConfig+0x1fe>
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d006      	beq.n	800415e <UART_SetConfig+0x20a>
 8004150:	e00b      	b.n	800416a <UART_SetConfig+0x216>
 8004152:	2300      	movs	r3, #0
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e0a1      	b.n	800429c <UART_SetConfig+0x348>
 8004158:	2302      	movs	r3, #2
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e09e      	b.n	800429c <UART_SetConfig+0x348>
 800415e:	2304      	movs	r3, #4
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e09b      	b.n	800429c <UART_SetConfig+0x348>
 8004164:	2308      	movs	r3, #8
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e098      	b.n	800429c <UART_SetConfig+0x348>
 800416a:	2310      	movs	r3, #16
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e095      	b.n	800429c <UART_SetConfig+0x348>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <UART_SetConfig+0x2e0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d125      	bne.n	80041c6 <UART_SetConfig+0x272>
 800417a:	4b29      	ldr	r3, [pc, #164]	; (8004220 <UART_SetConfig+0x2cc>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004188:	d017      	beq.n	80041ba <UART_SetConfig+0x266>
 800418a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800418e:	d817      	bhi.n	80041c0 <UART_SetConfig+0x26c>
 8004190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004194:	d00b      	beq.n	80041ae <UART_SetConfig+0x25a>
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419a:	d811      	bhi.n	80041c0 <UART_SetConfig+0x26c>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <UART_SetConfig+0x254>
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x260>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x26c>
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e076      	b.n	800429c <UART_SetConfig+0x348>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e073      	b.n	800429c <UART_SetConfig+0x348>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e070      	b.n	800429c <UART_SetConfig+0x348>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e06d      	b.n	800429c <UART_SetConfig+0x348>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e06a      	b.n	800429c <UART_SetConfig+0x348>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <UART_SetConfig+0x2e4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d138      	bne.n	8004242 <UART_SetConfig+0x2ee>
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <UART_SetConfig+0x2cc>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041de:	d017      	beq.n	8004210 <UART_SetConfig+0x2bc>
 80041e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041e4:	d82a      	bhi.n	800423c <UART_SetConfig+0x2e8>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ea:	d00b      	beq.n	8004204 <UART_SetConfig+0x2b0>
 80041ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f0:	d824      	bhi.n	800423c <UART_SetConfig+0x2e8>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <UART_SetConfig+0x2aa>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d006      	beq.n	800420a <UART_SetConfig+0x2b6>
 80041fc:	e01e      	b.n	800423c <UART_SetConfig+0x2e8>
 80041fe:	2300      	movs	r3, #0
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e04b      	b.n	800429c <UART_SetConfig+0x348>
 8004204:	2302      	movs	r3, #2
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e048      	b.n	800429c <UART_SetConfig+0x348>
 800420a:	2304      	movs	r3, #4
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e045      	b.n	800429c <UART_SetConfig+0x348>
 8004210:	2308      	movs	r3, #8
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e042      	b.n	800429c <UART_SetConfig+0x348>
 8004216:	bf00      	nop
 8004218:	efff69f3 	.word	0xefff69f3
 800421c:	40011000 	.word	0x40011000
 8004220:	40023800 	.word	0x40023800
 8004224:	40004400 	.word	0x40004400
 8004228:	40004800 	.word	0x40004800
 800422c:	40004c00 	.word	0x40004c00
 8004230:	40005000 	.word	0x40005000
 8004234:	40011400 	.word	0x40011400
 8004238:	40007800 	.word	0x40007800
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e02c      	b.n	800429c <UART_SetConfig+0x348>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a72      	ldr	r2, [pc, #456]	; (8004410 <UART_SetConfig+0x4bc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x344>
 800424c:	4b71      	ldr	r3, [pc, #452]	; (8004414 <UART_SetConfig+0x4c0>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004256:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x338>
 800425c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004260:	d817      	bhi.n	8004292 <UART_SetConfig+0x33e>
 8004262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004266:	d00b      	beq.n	8004280 <UART_SetConfig+0x32c>
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d811      	bhi.n	8004292 <UART_SetConfig+0x33e>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <UART_SetConfig+0x326>
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x332>
 8004278:	e00b      	b.n	8004292 <UART_SetConfig+0x33e>
 800427a:	2300      	movs	r3, #0
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e00d      	b.n	800429c <UART_SetConfig+0x348>
 8004280:	2302      	movs	r3, #2
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e00a      	b.n	800429c <UART_SetConfig+0x348>
 8004286:	2304      	movs	r3, #4
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e007      	b.n	800429c <UART_SetConfig+0x348>
 800428c:	2308      	movs	r3, #8
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e004      	b.n	800429c <UART_SetConfig+0x348>
 8004292:	2310      	movs	r3, #16
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e001      	b.n	800429c <UART_SetConfig+0x348>
 8004298:	2310      	movs	r3, #16
 800429a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	d15b      	bne.n	800435e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042a6:	7ffb      	ldrb	r3, [r7, #31]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d828      	bhi.n	80042fe <UART_SetConfig+0x3aa>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x360>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ff 	.word	0x080042ff
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fcc8 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 80042dc:	61b8      	str	r0, [r7, #24]
        break;
 80042de:	e013      	b.n	8004308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe fcd8 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <UART_SetConfig+0x4c4>)
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e00c      	b.n	8004308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe fbab 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80042f2:	61b8      	str	r0, [r7, #24]
        break;
 80042f4:	e008      	b.n	8004308 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	61bb      	str	r3, [r7, #24]
        break;
 80042fc:	e004      	b.n	8004308 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	77bb      	strb	r3, [r7, #30]
        break;
 8004306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d074      	beq.n	80043f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	005a      	lsls	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b0f      	cmp	r3, #15
 8004328:	d916      	bls.n	8004358 <UART_SetConfig+0x404>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004330:	d212      	bcs.n	8004358 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f023 030f 	bic.w	r3, r3, #15
 800433a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	b29a      	uxth	r2, r3
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	4313      	orrs	r3, r2
 800434c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	89fa      	ldrh	r2, [r7, #14]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e04f      	b.n	80043f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	77bb      	strb	r3, [r7, #30]
 800435c:	e04c      	b.n	80043f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800435e:	7ffb      	ldrb	r3, [r7, #31]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d828      	bhi.n	80043b6 <UART_SetConfig+0x462>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x418>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004391 	.word	0x08004391
 8004370:	08004399 	.word	0x08004399
 8004374:	080043a1 	.word	0x080043a1
 8004378:	080043b7 	.word	0x080043b7
 800437c:	080043a7 	.word	0x080043a7
 8004380:	080043b7 	.word	0x080043b7
 8004384:	080043b7 	.word	0x080043b7
 8004388:	080043b7 	.word	0x080043b7
 800438c:	080043af 	.word	0x080043af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004390:	f7fe fc6c 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8004394:	61b8      	str	r0, [r7, #24]
        break;
 8004396:	e013      	b.n	80043c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004398:	f7fe fc7c 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 800439c:	61b8      	str	r0, [r7, #24]
        break;
 800439e:	e00f      	b.n	80043c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <UART_SetConfig+0x4c4>)
 80043a2:	61bb      	str	r3, [r7, #24]
        break;
 80043a4:	e00c      	b.n	80043c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a6:	f7fe fb4f 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80043aa:	61b8      	str	r0, [r7, #24]
        break;
 80043ac:	e008      	b.n	80043c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	61bb      	str	r3, [r7, #24]
        break;
 80043b4:	e004      	b.n	80043c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	77bb      	strb	r3, [r7, #30]
        break;
 80043be:	bf00      	nop
    }

    if (pclk != 0U)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085a      	lsrs	r2, r3, #1
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	d909      	bls.n	80043f4 <UART_SetConfig+0x4a0>
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e6:	d205      	bcs.n	80043f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e001      	b.n	80043f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004404:	7fbb      	ldrb	r3, [r7, #30]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40007c00 	.word	0x40007c00
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400

0800441c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01a      	beq.n	8004532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d10a      	bne.n	8004532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004570:	f7fc fe70 	bl	8001254 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10e      	bne.n	80045a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f81b 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e011      	b.n	80045c6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b09c      	sub	sp, #112	; 0x70
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	e0a7      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	f000 80a3 	beq.w	8004730 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fc fe33 	bl	8001254 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
 80045fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d13f      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004614:	667b      	str	r3, [r7, #100]	; 0x64
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004620:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800462c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e6      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004652:	64ba      	str	r2, [r7, #72]	; 0x48
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e068      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d050      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469c:	d148      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
 80046c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046fa:	623a      	str	r2, [r7, #32]
 80046fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	61bb      	str	r3, [r7, #24]
   return(result);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e010      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	429a      	cmp	r2, r3
 800474c:	f43f af48 	beq.w	80045e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3770      	adds	r7, #112	; 0x70
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b096      	sub	sp, #88	; 0x58
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2222      	movs	r2, #34	; 0x22
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478c:	2b00      	cmp	r3, #0
 800478e:	d028      	beq.n	80047e2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	4a3e      	ldr	r2, [pc, #248]	; (8004890 <UART_Start_Receive_DMA+0x134>)
 8004796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <UART_Start_Receive_DMA+0x138>)
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a4:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <UART_Start_Receive_DMA+0x13c>)
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ac:	2200      	movs	r2, #0
 80047ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	4619      	mov	r1, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	461a      	mov	r2, r3
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f7fc ff36 	bl	8001634 <HAL_DMA_Start_IT>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2210      	movs	r2, #16
 80047d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e051      	b.n	8004886 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d018      	beq.n	800481c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004808:	64bb      	str	r3, [r7, #72]	; 0x48
 800480a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800480e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e6      	bne.n	80047ea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	653b      	str	r3, [r7, #80]	; 0x50
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800483c:	637a      	str	r2, [r7, #52]	; 0x34
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	613b      	str	r3, [r7, #16]
   return(result);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004870:	623a      	str	r2, [r7, #32]
 8004872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	69f9      	ldr	r1, [r7, #28]
 8004876:	6a3a      	ldr	r2, [r7, #32]
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	61bb      	str	r3, [r7, #24]
   return(result);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3758      	adds	r7, #88	; 0x58
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08004a63 	.word	0x08004a63
 8004894:	08004b8b 	.word	0x08004b8b
 8004898:	08004bc9 	.word	0x08004bc9

0800489c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	; 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	613b      	str	r3, [r7, #16]
   return(result);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80048dc:	bf00      	nop
 80048de:	3724      	adds	r7, #36	; 0x24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b095      	sub	sp, #84	; 0x54
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
 8004910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e6      	bne.n	80048f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	61fb      	str	r3, [r7, #28]
   return(result);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	64bb      	str	r3, [r7, #72]	; 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	2b01      	cmp	r3, #1
 800495c:	d118      	bne.n	8004990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	60bb      	str	r3, [r7, #8]
   return(result);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 0310 	bic.w	r3, r3, #16
 8004972:	647b      	str	r3, [r7, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6979      	ldr	r1, [r7, #20]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	613b      	str	r3, [r7, #16]
   return(result);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049a4:	bf00      	nop
 80049a6:	3754      	adds	r7, #84	; 0x54
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b090      	sub	sp, #64	; 0x40
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d037      	beq.n	8004a38 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	623b      	str	r3, [r7, #32]
   return(result);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f0:	633a      	str	r2, [r7, #48]	; 0x30
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e6      	bne.n	8004a04 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a36:	e002      	b.n	8004a3e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8004a38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004a3a:	f7ff fa57 	bl	8003eec <HAL_UART_TxCpltCallback>
}
 8004a3e:	bf00      	nop
 8004a40:	3740      	adds	r7, #64	; 0x40
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff fa53 	bl	8003f00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b09c      	sub	sp, #112	; 0x70
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d071      	beq.n	8004b5e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	667b      	str	r3, [r7, #100]	; 0x64
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ad4:	647a      	str	r2, [r7, #68]	; 0x44
 8004ad6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	623b      	str	r3, [r7, #32]
   return(result);
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afe:	663b      	str	r3, [r7, #96]	; 0x60
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b08:	633a      	str	r2, [r7, #48]	; 0x30
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d118      	bne.n	8004b5e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f023 0310 	bic.w	r3, r3, #16
 8004b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	69b9      	ldr	r1, [r7, #24]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	617b      	str	r3, [r7, #20]
   return(result);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e6      	bne.n	8004b2c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	2200      	movs	r2, #0
 8004b62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b72:	4619      	mov	r1, r3
 8004b74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b76:	f7ff f9e1 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b7a:	e002      	b.n	8004b82 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8004b7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b7e:	f000 fc65 	bl	800544c <HAL_UART_RxCpltCallback>
}
 8004b82:	bf00      	nop
 8004b84:	3770      	adds	r7, #112	; 0x70
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d109      	bne.n	8004bba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff f9c2 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb8:	e002      	b.n	8004bc0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff f9aa 	bl	8003f14 <HAL_UART_RxHalfCpltCallback>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d109      	bne.n	8004c06 <UART_DMAError+0x3e>
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b21      	cmp	r3, #33	; 0x21
 8004bf6:	d106      	bne.n	8004c06 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f7ff fe4b 	bl	800489c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d109      	bne.n	8004c28 <UART_DMAError+0x60>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b22      	cmp	r3, #34	; 0x22
 8004c18:	d106      	bne.n	8004c28 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7ff fe60 	bl	80048e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	f043 0210 	orr.w	r2, r3, #16
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c38:	6978      	ldr	r0, [r7, #20]
 8004c3a:	f7ff f975 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff f95f 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b088      	sub	sp, #32
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6979      	ldr	r1, [r7, #20]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff f917 	bl	8003eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cbe:	bf00      	nop
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc8:	b084      	sub	sp, #16
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	f107 001c 	add.w	r0, r7, #28
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d120      	bne.n	8004d22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <USB_CoreInit+0xac>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa96 	bl	8005248 <USB_CoreReset>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	e010      	b.n	8004d44 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa8a 	bl	8005248 <USB_CoreReset>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10b      	bne.n	8004d62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f043 0206 	orr.w	r2, r3, #6
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d6e:	b004      	add	sp, #16
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	ffbdffbf 	.word	0xffbdffbf

08004d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 0201 	bic.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d115      	bne.n	8004de8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dc8:	2001      	movs	r0, #1
 8004dca:	f7fc fa4f 	bl	800126c <HAL_Delay>
      ms++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa29 	bl	800522c <USB_GetMode>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d01e      	beq.n	8004e1e <USB_SetCurrentMode+0x84>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b31      	cmp	r3, #49	; 0x31
 8004de4:	d9f0      	bls.n	8004dc8 <USB_SetCurrentMode+0x2e>
 8004de6:	e01a      	b.n	8004e1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d115      	bne.n	8004e1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f7fc fa36 	bl	800126c <HAL_Delay>
      ms++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa10 	bl	800522c <USB_GetMode>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <USB_SetCurrentMode+0x84>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b31      	cmp	r3, #49	; 0x31
 8004e16:	d9f0      	bls.n	8004dfa <USB_SetCurrentMode+0x60>
 8004e18:	e001      	b.n	8004e1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e005      	b.n	8004e2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b32      	cmp	r3, #50	; 0x32
 8004e22:	d101      	bne.n	8004e28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e34:	b084      	sub	sp, #16
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e009      	b.n	8004e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3340      	adds	r3, #64	; 0x40
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0e      	cmp	r3, #14
 8004e6c:	d9f2      	bls.n	8004e54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11c      	bne.n	8004eae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e82:	f043 0302 	orr.w	r3, r3, #2
 8004e86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e005      	b.n	8004eba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ecc:	4619      	mov	r1, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	680b      	ldr	r3, [r1, #0]
 8004ed8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10c      	bne.n	8004efa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f965 	bl	80051b8 <USB_SetDevSpeed>
 8004eee:	e008      	b.n	8004f02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f960 	bl	80051b8 <USB_SetDevSpeed>
 8004ef8:	e003      	b.n	8004f02 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004efa:	2103      	movs	r1, #3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f95b 	bl	80051b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f02:	2110      	movs	r1, #16
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8f3 	bl	80050f0 <USB_FlushTxFifo>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f91f 	bl	8005158 <USB_FlushRxFifo>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	461a      	mov	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e043      	b.n	8004fd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f64:	d118      	bne.n	8004f98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e013      	b.n	8004faa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e008      	b.n	8004faa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d3b7      	bcc.n	8004f4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e043      	b.n	800506c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffa:	d118      	bne.n	800502e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	461a      	mov	r2, r3
 8005010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e013      	b.n	8005040 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	e008      	b.n	8005040 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	461a      	mov	r2, r3
 800504e:	2300      	movs	r3, #0
 8005050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3301      	adds	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3b7      	bcc.n	8004fe4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <USB_DevInit+0x2b4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f043 0208 	orr.w	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <USB_DevInit+0x2b8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr
 80050e8:	803c3800 	.word	0x803c3800
 80050ec:	40000004 	.word	0x40000004

080050f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a13      	ldr	r2, [pc, #76]	; (8005154 <USB_FlushTxFifo+0x64>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d901      	bls.n	8005110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e01b      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	daf2      	bge.n	80050fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a08      	ldr	r2, [pc, #32]	; (8005154 <USB_FlushTxFifo+0x64>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d0f0      	beq.n	8005128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	00030d40 	.word	0x00030d40

08005158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <USB_FlushRxFifo+0x5c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e018      	b.n	80051a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	daf2      	bge.n	8005164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2210      	movs	r2, #16
 8005186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <USB_FlushRxFifo+0x5c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e006      	b.n	80051a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d0f0      	beq.n	8005188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005204:	f023 0303 	bic.w	r3, r3, #3
 8005208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f003 0301 	and.w	r3, r3, #1
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <USB_CoreReset+0x64>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e01b      	b.n	800529e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	daf2      	bge.n	8005254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a09      	ldr	r2, [pc, #36]	; (80052ac <USB_CoreReset+0x64>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e006      	b.n	800529e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d0f0      	beq.n	800527e <USB_CoreReset+0x36>

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	00030d40 	.word	0x00030d40

080052b0 <print_pocket_content>:
/**
 * @brief Function to print content of the pocket.
 * @param pocket Pointer to the pocket structure.
 * PRIu32 - is being used for disable the uint32 warning
 */
void print_pocket_content(pocket_t* pocket) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    printf("Pocket content:\n");
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <print_pocket_content+0x30>)
 80052ba:	f000 fa03 	bl	80056c4 <puts>
    printf("ID: %" PRIu32 "\n", pocket->m_id);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4807      	ldr	r0, [pc, #28]	; (80052e4 <print_pocket_content+0x34>)
 80052c6:	f000 f977 	bl	80055b8 <iprintf>
    printf("Padding: %s\n", pocket->m_padding);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4805      	ldr	r0, [pc, #20]	; (80052e8 <print_pocket_content+0x38>)
 80052d2:	f000 f971 	bl	80055b8 <iprintf>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	080065d8 	.word	0x080065d8
 80052e4:	080065e8 	.word	0x080065e8
 80052e8:	080065f4 	.word	0x080065f4

080052ec <compare_pockets>:
 * @brief Function to compare two pockets.
 * @param pocket1 Pointer to the first pocket.
 * @param pocket2 Pointer to the second pocket.
 * @return 1 if pockets are identical, 0 otherwise.
 */
uint8_t compare_pockets(pocket_t* pocket1, pocket_t* pocket2) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    if (pocket1->m_id != pocket2->m_id) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d001      	beq.n	8005306 <compare_pockets+0x1a>
        return 0;
 8005302:	2300      	movs	r3, #0
 8005304:	e00d      	b.n	8005322 <compare_pockets+0x36>
    }

    if (memcmp(pocket1->m_padding, pocket2->m_padding, PADDING) != 0) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	1d18      	adds	r0, r3, #4
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	222e      	movs	r2, #46	; 0x2e
 8005310:	4619      	mov	r1, r3
 8005312:	f000 f939 	bl	8005588 <memcmp>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <compare_pockets+0x34>
        return 0;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <compare_pockets+0x36>
    }

    return 1;
 8005320:	2301      	movs	r3, #1
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <rtg_main>:

/**
 * @brief Main function.
 * Sets up data transfer and handles data sending and receiving.
 */
void rtg_main() {
 800532c:	b5b0      	push	{r4, r5, r7, lr}
 800532e:	b08e      	sub	sp, #56	; 0x38
 8005330:	af00      	add	r7, sp, #0
	while (1) {
		t1.m_id = DATA_TRANSFER_ID;
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <rtg_main+0xec>)
 8005334:	2202      	movs	r2, #2
 8005336:	601a      	str	r2, [r3, #0]
		memset(t1.m_padding, '0', sizeof(t1.m_padding));
 8005338:	222e      	movs	r2, #46	; 0x2e
 800533a:	2130      	movs	r1, #48	; 0x30
 800533c:	4837      	ldr	r0, [pc, #220]	; (800541c <rtg_main+0xf0>)
 800533e:	f000 f933 	bl	80055a8 <memset>
		memcpy(buffer_send, &t1, sizeof(t1));
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <rtg_main+0xf4>)
 8005344:	4b34      	ldr	r3, [pc, #208]	; (8005418 <rtg_main+0xec>)
 8005346:	4614      	mov	r4, r2
 8005348:	461d      	mov	r5, r3
 800534a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800534e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	8023      	strh	r3, [r4, #0]

		HAL_UART_Receive_DMA(UART_SLAVE, buffer_receive_slave, BUFFER_SIZE);
 800535a:	2232      	movs	r2, #50	; 0x32
 800535c:	4931      	ldr	r1, [pc, #196]	; (8005424 <rtg_main+0xf8>)
 800535e:	4832      	ldr	r0, [pc, #200]	; (8005428 <rtg_main+0xfc>)
 8005360:	f7fe faae 	bl	80038c0 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(UART_MASTER, buffer_send, BUFFER_SIZE);
 8005364:	2232      	movs	r2, #50	; 0x32
 8005366:	492e      	ldr	r1, [pc, #184]	; (8005420 <rtg_main+0xf4>)
 8005368:	4830      	ldr	r0, [pc, #192]	; (800542c <rtg_main+0x100>)
 800536a:	f7fe fa2d 	bl	80037c8 <HAL_UART_Transmit_DMA>

		HAL_UART_Receive_DMA(UART_MASTER, buffer_receive_master, BUFFER_SIZE);
 800536e:	2232      	movs	r2, #50	; 0x32
 8005370:	492f      	ldr	r1, [pc, #188]	; (8005430 <rtg_main+0x104>)
 8005372:	482e      	ldr	r0, [pc, #184]	; (800542c <rtg_main+0x100>)
 8005374:	f7fe faa4 	bl	80038c0 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(UART_SLAVE, buffer_send, BUFFER_SIZE);
 8005378:	2232      	movs	r2, #50	; 0x32
 800537a:	4929      	ldr	r1, [pc, #164]	; (8005420 <rtg_main+0xf4>)
 800537c:	482a      	ldr	r0, [pc, #168]	; (8005428 <rtg_main+0xfc>)
 800537e:	f7fe fa23 	bl	80037c8 <HAL_UART_Transmit_DMA>

		HAL_Delay(DATA_TRANSFER_INTERVAL);
 8005382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005386:	f7fb ff71 	bl	800126c <HAL_Delay>

		if (uart_slave_callback_success) {
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <rtg_main+0x108>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <rtg_main+0x96>
			printf("Data_Sent:\r\n");
 8005394:	4828      	ldr	r0, [pc, #160]	; (8005438 <rtg_main+0x10c>)
 8005396:	f000 f995 	bl	80056c4 <puts>
			printf("%s\r\n", buffer_send);
 800539a:	4921      	ldr	r1, [pc, #132]	; (8005420 <rtg_main+0xf4>)
 800539c:	4827      	ldr	r0, [pc, #156]	; (800543c <rtg_main+0x110>)
 800539e:	f000 f90b 	bl	80055b8 <iprintf>

            print_pocket_content(&t1);
 80053a2:	481d      	ldr	r0, [pc, #116]	; (8005418 <rtg_main+0xec>)
 80053a4:	f7ff ff84 	bl	80052b0 <print_pocket_content>

			HAL_UART_Receive_DMA(UART_MASTER, buffer_receive_master, BUFFER_SIZE);
 80053a8:	2232      	movs	r2, #50	; 0x32
 80053aa:	4921      	ldr	r1, [pc, #132]	; (8005430 <rtg_main+0x104>)
 80053ac:	481f      	ldr	r0, [pc, #124]	; (800542c <rtg_main+0x100>)
 80053ae:	f7fe fa87 	bl	80038c0 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(UART_SLAVE, buffer_send, BUFFER_SIZE);
 80053b2:	2232      	movs	r2, #50	; 0x32
 80053b4:	491a      	ldr	r1, [pc, #104]	; (8005420 <rtg_main+0xf4>)
 80053b6:	481c      	ldr	r0, [pc, #112]	; (8005428 <rtg_main+0xfc>)
 80053b8:	f7fe fa06 	bl	80037c8 <HAL_UART_Transmit_DMA>
			uart_slave_callback_success = 0;
 80053bc:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <rtg_main+0x108>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
		}

		if (uart_master_callback_success) {
 80053c2:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <rtg_main+0x114>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0b2      	beq.n	8005332 <rtg_main+0x6>
			printf("Data_Received from Master:\r\n");
 80053cc:	481d      	ldr	r0, [pc, #116]	; (8005444 <rtg_main+0x118>)
 80053ce:	f000 f979 	bl	80056c4 <puts>
			printf("%s\r\n", buffer_receive_master);
 80053d2:	4917      	ldr	r1, [pc, #92]	; (8005430 <rtg_main+0x104>)
 80053d4:	4819      	ldr	r0, [pc, #100]	; (800543c <rtg_main+0x110>)
 80053d6:	f000 f8ef 	bl	80055b8 <iprintf>

            pocket_t received_pocket;
            memcpy(&received_pocket, buffer_receive_master, BUFFER_SIZE);
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <rtg_main+0x104>)
 80053dc:	1d3c      	adds	r4, r7, #4
 80053de:	461d      	mov	r5, r3
 80053e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	8023      	strh	r3, [r4, #0]
            print_pocket_content(&received_pocket);
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff5c 	bl	80052b0 <print_pocket_content>

            if (compare_pockets(&t1, &received_pocket) == 0) {
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4806      	ldr	r0, [pc, #24]	; (8005418 <rtg_main+0xec>)
 80053fe:	f7ff ff75 	bl	80052ec <compare_pockets>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <rtg_main+0xe2>
                printf("Warning: Sent and received data do not match.\n");
 8005408:	480f      	ldr	r0, [pc, #60]	; (8005448 <rtg_main+0x11c>)
 800540a:	f000 f95b 	bl	80056c4 <puts>
            }

			uart_master_callback_success = 0;
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <rtg_main+0x114>)
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
		t1.m_id = DATA_TRANSFER_ID;
 8005414:	e78d      	b.n	8005332 <rtg_main+0x6>
 8005416:	bf00      	nop
 8005418:	20000954 	.word	0x20000954
 800541c:	20000958 	.word	0x20000958
 8005420:	200008b8 	.word	0x200008b8
 8005424:	200008ec 	.word	0x200008ec
 8005428:	2000019c 	.word	0x2000019c
 800542c:	2000008c 	.word	0x2000008c
 8005430:	20000920 	.word	0x20000920
 8005434:	200008b4 	.word	0x200008b4
 8005438:	08006604 	.word	0x08006604
 800543c:	08006610 	.word	0x08006610
 8005440:	200008b5 	.word	0x200008b5
 8005444:	08006618 	.word	0x08006618
 8005448:	08006634 	.word	0x08006634

0800544c <HAL_UART_RxCpltCallback>:
/**
 * @brief UART Receive Complete callback function.
 * This function is called when the reception of data via UART is complete.
 * @param huart Pointer to the UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	if (huart == UART_SLAVE) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_UART_RxCpltCallback+0x30>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d102      	bne.n	8005462 <HAL_UART_RxCpltCallback+0x16>
		uart_slave_callback_success = 1;
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_UART_RxCpltCallback+0x34>)
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
	}

	if (huart == UART_MASTER) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a07      	ldr	r2, [pc, #28]	; (8005484 <HAL_UART_RxCpltCallback+0x38>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d102      	bne.n	8005470 <HAL_UART_RxCpltCallback+0x24>
		uart_master_callback_success = 1;
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <HAL_UART_RxCpltCallback+0x3c>)
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
	}
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	2000019c 	.word	0x2000019c
 8005480:	200008b4 	.word	0x200008b4
 8005484:	2000008c 	.word	0x2000008c
 8005488:	200008b5 	.word	0x200008b5

0800548c <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b29a      	uxth	r2, r3
 800549c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4804      	ldr	r0, [pc, #16]	; (80054b4 <_write+0x28>)
 80054a4:	f7fe f848 	bl	8003538 <HAL_UART_Transmit>
	return len;
 80054a8:	687b      	ldr	r3, [r7, #4]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000114 	.word	0x20000114

080054b8 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
	int ch=0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80054c8:	f107 0114 	add.w	r1, r7, #20
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295
 80054d0:	2201      	movs	r2, #1
 80054d2:	4817      	ldr	r0, [pc, #92]	; (8005530 <_read+0x78>)
 80054d4:	f7fe f8b3 	bl	800363e <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80054d8:	f107 0114 	add.w	r1, r7, #20
 80054dc:	f04f 33ff 	mov.w	r3, #4294967295
 80054e0:	2201      	movs	r2, #1
 80054e2:	4813      	ldr	r0, [pc, #76]	; (8005530 <_read+0x78>)
 80054e4:	f7fe f828 	bl	8003538 <HAL_UART_Transmit>
	if(ch==13)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b0d      	cmp	r3, #13
 80054ec:	d10a      	bne.n	8005504 <_read+0x4c>
	{
		ch=10;
 80054ee:	230a      	movs	r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80054f2:	f107 0114 	add.w	r1, r7, #20
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	2201      	movs	r2, #1
 80054fc:	480c      	ldr	r0, [pc, #48]	; (8005530 <_read+0x78>)
 80054fe:	f7fe f81b 	bl	8003538 <HAL_UART_Transmit>
 8005502:	e00c      	b.n	800551e <_read+0x66>
	}
	else if(ch==8)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d109      	bne.n	800551e <_read+0x66>
	{
		ch=0x30;
 800550a:	2330      	movs	r3, #48	; 0x30
 800550c:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 800550e:	f107 0114 	add.w	r1, r7, #20
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	2201      	movs	r2, #1
 8005518:	4805      	ldr	r0, [pc, #20]	; (8005530 <_read+0x78>)
 800551a:	f7fe f80d 	bl	8003538 <HAL_UART_Transmit>
	}

	*ptr=ch;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	701a      	strb	r2, [r3, #0]

	return 1;
 8005526:	2301      	movs	r3, #1
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000114 	.word	0x20000114

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000000c 	.word	0x2000000c

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	; (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	; (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	; (8005584 <__libc_init_array+0x44>)
 8005554:	f001 f834 	bl	80065c0 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	08006724 	.word	0x08006724
 800557c:	08006724 	.word	0x08006724
 8005580:	08006724 	.word	0x08006724
 8005584:	08006728 	.word	0x08006728

08005588 <memcmp>:
 8005588:	b510      	push	{r4, lr}
 800558a:	3901      	subs	r1, #1
 800558c:	4402      	add	r2, r0
 800558e:	4290      	cmp	r0, r2
 8005590:	d101      	bne.n	8005596 <memcmp+0xe>
 8005592:	2000      	movs	r0, #0
 8005594:	e005      	b.n	80055a2 <memcmp+0x1a>
 8005596:	7803      	ldrb	r3, [r0, #0]
 8005598:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800559c:	42a3      	cmp	r3, r4
 800559e:	d001      	beq.n	80055a4 <memcmp+0x1c>
 80055a0:	1b18      	subs	r0, r3, r4
 80055a2:	bd10      	pop	{r4, pc}
 80055a4:	3001      	adds	r0, #1
 80055a6:	e7f2      	b.n	800558e <memcmp+0x6>

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <iprintf>:
 80055b8:	b40f      	push	{r0, r1, r2, r3}
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <iprintf+0x2c>)
 80055bc:	b513      	push	{r0, r1, r4, lr}
 80055be:	681c      	ldr	r4, [r3, #0]
 80055c0:	b124      	cbz	r4, 80055cc <iprintf+0x14>
 80055c2:	69a3      	ldr	r3, [r4, #24]
 80055c4:	b913      	cbnz	r3, 80055cc <iprintf+0x14>
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fa5e 	bl	8005a88 <__sinit>
 80055cc:	ab05      	add	r3, sp, #20
 80055ce:	9a04      	ldr	r2, [sp, #16]
 80055d0:	68a1      	ldr	r1, [r4, #8]
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fc67 	bl	8005ea8 <_vfiprintf_r>
 80055da:	b002      	add	sp, #8
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	b004      	add	sp, #16
 80055e2:	4770      	bx	lr
 80055e4:	2000000c 	.word	0x2000000c

080055e8 <_puts_r>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	460e      	mov	r6, r1
 80055ec:	4605      	mov	r5, r0
 80055ee:	b118      	cbz	r0, 80055f8 <_puts_r+0x10>
 80055f0:	6983      	ldr	r3, [r0, #24]
 80055f2:	b90b      	cbnz	r3, 80055f8 <_puts_r+0x10>
 80055f4:	f000 fa48 	bl	8005a88 <__sinit>
 80055f8:	69ab      	ldr	r3, [r5, #24]
 80055fa:	68ac      	ldr	r4, [r5, #8]
 80055fc:	b913      	cbnz	r3, 8005604 <_puts_r+0x1c>
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fa42 	bl	8005a88 <__sinit>
 8005604:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <_puts_r+0xd0>)
 8005606:	429c      	cmp	r4, r3
 8005608:	d120      	bne.n	800564c <_puts_r+0x64>
 800560a:	686c      	ldr	r4, [r5, #4]
 800560c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800560e:	07db      	lsls	r3, r3, #31
 8005610:	d405      	bmi.n	800561e <_puts_r+0x36>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	0598      	lsls	r0, r3, #22
 8005616:	d402      	bmi.n	800561e <_puts_r+0x36>
 8005618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561a:	f000 fad3 	bl	8005bc4 <__retarget_lock_acquire_recursive>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	0719      	lsls	r1, r3, #28
 8005622:	d51d      	bpl.n	8005660 <_puts_r+0x78>
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	b1db      	cbz	r3, 8005660 <_puts_r+0x78>
 8005628:	3e01      	subs	r6, #1
 800562a:	68a3      	ldr	r3, [r4, #8]
 800562c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005630:	3b01      	subs	r3, #1
 8005632:	60a3      	str	r3, [r4, #8]
 8005634:	bb39      	cbnz	r1, 8005686 <_puts_r+0x9e>
 8005636:	2b00      	cmp	r3, #0
 8005638:	da38      	bge.n	80056ac <_puts_r+0xc4>
 800563a:	4622      	mov	r2, r4
 800563c:	210a      	movs	r1, #10
 800563e:	4628      	mov	r0, r5
 8005640:	f000 f848 	bl	80056d4 <__swbuf_r>
 8005644:	3001      	adds	r0, #1
 8005646:	d011      	beq.n	800566c <_puts_r+0x84>
 8005648:	250a      	movs	r5, #10
 800564a:	e011      	b.n	8005670 <_puts_r+0x88>
 800564c:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <_puts_r+0xd4>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d101      	bne.n	8005656 <_puts_r+0x6e>
 8005652:	68ac      	ldr	r4, [r5, #8]
 8005654:	e7da      	b.n	800560c <_puts_r+0x24>
 8005656:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <_puts_r+0xd8>)
 8005658:	429c      	cmp	r4, r3
 800565a:	bf08      	it	eq
 800565c:	68ec      	ldreq	r4, [r5, #12]
 800565e:	e7d5      	b.n	800560c <_puts_r+0x24>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f888 	bl	8005778 <__swsetup_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0dd      	beq.n	8005628 <_puts_r+0x40>
 800566c:	f04f 35ff 	mov.w	r5, #4294967295
 8005670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005672:	07da      	lsls	r2, r3, #31
 8005674:	d405      	bmi.n	8005682 <_puts_r+0x9a>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	059b      	lsls	r3, r3, #22
 800567a:	d402      	bmi.n	8005682 <_puts_r+0x9a>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f000 faa2 	bl	8005bc6 <__retarget_lock_release_recursive>
 8005682:	4628      	mov	r0, r5
 8005684:	bd70      	pop	{r4, r5, r6, pc}
 8005686:	2b00      	cmp	r3, #0
 8005688:	da04      	bge.n	8005694 <_puts_r+0xac>
 800568a:	69a2      	ldr	r2, [r4, #24]
 800568c:	429a      	cmp	r2, r3
 800568e:	dc06      	bgt.n	800569e <_puts_r+0xb6>
 8005690:	290a      	cmp	r1, #10
 8005692:	d004      	beq.n	800569e <_puts_r+0xb6>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	7019      	strb	r1, [r3, #0]
 800569c:	e7c5      	b.n	800562a <_puts_r+0x42>
 800569e:	4622      	mov	r2, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 f817 	bl	80056d4 <__swbuf_r>
 80056a6:	3001      	adds	r0, #1
 80056a8:	d1bf      	bne.n	800562a <_puts_r+0x42>
 80056aa:	e7df      	b.n	800566c <_puts_r+0x84>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	250a      	movs	r5, #10
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	6022      	str	r2, [r4, #0]
 80056b4:	701d      	strb	r5, [r3, #0]
 80056b6:	e7db      	b.n	8005670 <_puts_r+0x88>
 80056b8:	080066a8 	.word	0x080066a8
 80056bc:	080066c8 	.word	0x080066c8
 80056c0:	08006688 	.word	0x08006688

080056c4 <puts>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <puts+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f7ff bf8d 	b.w	80055e8 <_puts_r>
 80056ce:	bf00      	nop
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <__swbuf_r>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	460e      	mov	r6, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	4605      	mov	r5, r0
 80056dc:	b118      	cbz	r0, 80056e6 <__swbuf_r+0x12>
 80056de:	6983      	ldr	r3, [r0, #24]
 80056e0:	b90b      	cbnz	r3, 80056e6 <__swbuf_r+0x12>
 80056e2:	f000 f9d1 	bl	8005a88 <__sinit>
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <__swbuf_r+0x98>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d12b      	bne.n	8005744 <__swbuf_r+0x70>
 80056ec:	686c      	ldr	r4, [r5, #4]
 80056ee:	69a3      	ldr	r3, [r4, #24]
 80056f0:	60a3      	str	r3, [r4, #8]
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	071a      	lsls	r2, r3, #28
 80056f6:	d52f      	bpl.n	8005758 <__swbuf_r+0x84>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	b36b      	cbz	r3, 8005758 <__swbuf_r+0x84>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	1ac0      	subs	r0, r0, r3
 8005702:	6963      	ldr	r3, [r4, #20]
 8005704:	b2f6      	uxtb	r6, r6
 8005706:	4283      	cmp	r3, r0
 8005708:	4637      	mov	r7, r6
 800570a:	dc04      	bgt.n	8005716 <__swbuf_r+0x42>
 800570c:	4621      	mov	r1, r4
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f926 	bl	8005960 <_fflush_r>
 8005714:	bb30      	cbnz	r0, 8005764 <__swbuf_r+0x90>
 8005716:	68a3      	ldr	r3, [r4, #8]
 8005718:	3b01      	subs	r3, #1
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	701e      	strb	r6, [r3, #0]
 8005724:	6963      	ldr	r3, [r4, #20]
 8005726:	3001      	adds	r0, #1
 8005728:	4283      	cmp	r3, r0
 800572a:	d004      	beq.n	8005736 <__swbuf_r+0x62>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d506      	bpl.n	8005740 <__swbuf_r+0x6c>
 8005732:	2e0a      	cmp	r6, #10
 8005734:	d104      	bne.n	8005740 <__swbuf_r+0x6c>
 8005736:	4621      	mov	r1, r4
 8005738:	4628      	mov	r0, r5
 800573a:	f000 f911 	bl	8005960 <_fflush_r>
 800573e:	b988      	cbnz	r0, 8005764 <__swbuf_r+0x90>
 8005740:	4638      	mov	r0, r7
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <__swbuf_r+0x9c>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d101      	bne.n	800574e <__swbuf_r+0x7a>
 800574a:	68ac      	ldr	r4, [r5, #8]
 800574c:	e7cf      	b.n	80056ee <__swbuf_r+0x1a>
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <__swbuf_r+0xa0>)
 8005750:	429c      	cmp	r4, r3
 8005752:	bf08      	it	eq
 8005754:	68ec      	ldreq	r4, [r5, #12]
 8005756:	e7ca      	b.n	80056ee <__swbuf_r+0x1a>
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f80c 	bl	8005778 <__swsetup_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	d0cb      	beq.n	80056fc <__swbuf_r+0x28>
 8005764:	f04f 37ff 	mov.w	r7, #4294967295
 8005768:	e7ea      	b.n	8005740 <__swbuf_r+0x6c>
 800576a:	bf00      	nop
 800576c:	080066a8 	.word	0x080066a8
 8005770:	080066c8 	.word	0x080066c8
 8005774:	08006688 	.word	0x08006688

08005778 <__swsetup_r>:
 8005778:	4b32      	ldr	r3, [pc, #200]	; (8005844 <__swsetup_r+0xcc>)
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	681d      	ldr	r5, [r3, #0]
 800577e:	4606      	mov	r6, r0
 8005780:	460c      	mov	r4, r1
 8005782:	b125      	cbz	r5, 800578e <__swsetup_r+0x16>
 8005784:	69ab      	ldr	r3, [r5, #24]
 8005786:	b913      	cbnz	r3, 800578e <__swsetup_r+0x16>
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f97d 	bl	8005a88 <__sinit>
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <__swsetup_r+0xd0>)
 8005790:	429c      	cmp	r4, r3
 8005792:	d10f      	bne.n	80057b4 <__swsetup_r+0x3c>
 8005794:	686c      	ldr	r4, [r5, #4]
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800579c:	0719      	lsls	r1, r3, #28
 800579e:	d42c      	bmi.n	80057fa <__swsetup_r+0x82>
 80057a0:	06dd      	lsls	r5, r3, #27
 80057a2:	d411      	bmi.n	80057c8 <__swsetup_r+0x50>
 80057a4:	2309      	movs	r3, #9
 80057a6:	6033      	str	r3, [r6, #0]
 80057a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	e03e      	b.n	8005832 <__swsetup_r+0xba>
 80057b4:	4b25      	ldr	r3, [pc, #148]	; (800584c <__swsetup_r+0xd4>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d101      	bne.n	80057be <__swsetup_r+0x46>
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	e7eb      	b.n	8005796 <__swsetup_r+0x1e>
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <__swsetup_r+0xd8>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	bf08      	it	eq
 80057c4:	68ec      	ldreq	r4, [r5, #12]
 80057c6:	e7e6      	b.n	8005796 <__swsetup_r+0x1e>
 80057c8:	0758      	lsls	r0, r3, #29
 80057ca:	d512      	bpl.n	80057f2 <__swsetup_r+0x7a>
 80057cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ce:	b141      	cbz	r1, 80057e2 <__swsetup_r+0x6a>
 80057d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d002      	beq.n	80057de <__swsetup_r+0x66>
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 fa5b 	bl	8005c94 <_free_r>
 80057de:	2300      	movs	r3, #0
 80057e0:	6363      	str	r3, [r4, #52]	; 0x34
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	2300      	movs	r3, #0
 80057ec:	6063      	str	r3, [r4, #4]
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f043 0308 	orr.w	r3, r3, #8
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	b94b      	cbnz	r3, 8005812 <__swsetup_r+0x9a>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005808:	d003      	beq.n	8005812 <__swsetup_r+0x9a>
 800580a:	4621      	mov	r1, r4
 800580c:	4630      	mov	r0, r6
 800580e:	f000 fa01 	bl	8005c14 <__smakebuf_r>
 8005812:	89a0      	ldrh	r0, [r4, #12]
 8005814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005818:	f010 0301 	ands.w	r3, r0, #1
 800581c:	d00a      	beq.n	8005834 <__swsetup_r+0xbc>
 800581e:	2300      	movs	r3, #0
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6963      	ldr	r3, [r4, #20]
 8005824:	425b      	negs	r3, r3
 8005826:	61a3      	str	r3, [r4, #24]
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	b943      	cbnz	r3, 800583e <__swsetup_r+0xc6>
 800582c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005830:	d1ba      	bne.n	80057a8 <__swsetup_r+0x30>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	0781      	lsls	r1, r0, #30
 8005836:	bf58      	it	pl
 8005838:	6963      	ldrpl	r3, [r4, #20]
 800583a:	60a3      	str	r3, [r4, #8]
 800583c:	e7f4      	b.n	8005828 <__swsetup_r+0xb0>
 800583e:	2000      	movs	r0, #0
 8005840:	e7f7      	b.n	8005832 <__swsetup_r+0xba>
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c
 8005848:	080066a8 	.word	0x080066a8
 800584c:	080066c8 	.word	0x080066c8
 8005850:	08006688 	.word	0x08006688

08005854 <__sflush_r>:
 8005854:	898a      	ldrh	r2, [r1, #12]
 8005856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	4605      	mov	r5, r0
 800585c:	0710      	lsls	r0, r2, #28
 800585e:	460c      	mov	r4, r1
 8005860:	d458      	bmi.n	8005914 <__sflush_r+0xc0>
 8005862:	684b      	ldr	r3, [r1, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	dc05      	bgt.n	8005874 <__sflush_r+0x20>
 8005868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	dc02      	bgt.n	8005874 <__sflush_r+0x20>
 800586e:	2000      	movs	r0, #0
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005876:	2e00      	cmp	r6, #0
 8005878:	d0f9      	beq.n	800586e <__sflush_r+0x1a>
 800587a:	2300      	movs	r3, #0
 800587c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005880:	682f      	ldr	r7, [r5, #0]
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	d032      	beq.n	80058ec <__sflush_r+0x98>
 8005886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	075a      	lsls	r2, r3, #29
 800588c:	d505      	bpl.n	800589a <__sflush_r+0x46>
 800588e:	6863      	ldr	r3, [r4, #4]
 8005890:	1ac0      	subs	r0, r0, r3
 8005892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005894:	b10b      	cbz	r3, 800589a <__sflush_r+0x46>
 8005896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005898:	1ac0      	subs	r0, r0, r3
 800589a:	2300      	movs	r3, #0
 800589c:	4602      	mov	r2, r0
 800589e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058a0:	6a21      	ldr	r1, [r4, #32]
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b0      	blx	r6
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	d106      	bne.n	80058ba <__sflush_r+0x66>
 80058ac:	6829      	ldr	r1, [r5, #0]
 80058ae:	291d      	cmp	r1, #29
 80058b0:	d82c      	bhi.n	800590c <__sflush_r+0xb8>
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <__sflush_r+0x108>)
 80058b4:	40ca      	lsrs	r2, r1
 80058b6:	07d6      	lsls	r6, r2, #31
 80058b8:	d528      	bpl.n	800590c <__sflush_r+0xb8>
 80058ba:	2200      	movs	r2, #0
 80058bc:	6062      	str	r2, [r4, #4]
 80058be:	04d9      	lsls	r1, r3, #19
 80058c0:	6922      	ldr	r2, [r4, #16]
 80058c2:	6022      	str	r2, [r4, #0]
 80058c4:	d504      	bpl.n	80058d0 <__sflush_r+0x7c>
 80058c6:	1c42      	adds	r2, r0, #1
 80058c8:	d101      	bne.n	80058ce <__sflush_r+0x7a>
 80058ca:	682b      	ldr	r3, [r5, #0]
 80058cc:	b903      	cbnz	r3, 80058d0 <__sflush_r+0x7c>
 80058ce:	6560      	str	r0, [r4, #84]	; 0x54
 80058d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058d2:	602f      	str	r7, [r5, #0]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	d0ca      	beq.n	800586e <__sflush_r+0x1a>
 80058d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058dc:	4299      	cmp	r1, r3
 80058de:	d002      	beq.n	80058e6 <__sflush_r+0x92>
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 f9d7 	bl	8005c94 <_free_r>
 80058e6:	2000      	movs	r0, #0
 80058e8:	6360      	str	r0, [r4, #52]	; 0x34
 80058ea:	e7c1      	b.n	8005870 <__sflush_r+0x1c>
 80058ec:	6a21      	ldr	r1, [r4, #32]
 80058ee:	2301      	movs	r3, #1
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b0      	blx	r6
 80058f4:	1c41      	adds	r1, r0, #1
 80058f6:	d1c7      	bne.n	8005888 <__sflush_r+0x34>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0c4      	beq.n	8005888 <__sflush_r+0x34>
 80058fe:	2b1d      	cmp	r3, #29
 8005900:	d001      	beq.n	8005906 <__sflush_r+0xb2>
 8005902:	2b16      	cmp	r3, #22
 8005904:	d101      	bne.n	800590a <__sflush_r+0xb6>
 8005906:	602f      	str	r7, [r5, #0]
 8005908:	e7b1      	b.n	800586e <__sflush_r+0x1a>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	e7ad      	b.n	8005870 <__sflush_r+0x1c>
 8005914:	690f      	ldr	r7, [r1, #16]
 8005916:	2f00      	cmp	r7, #0
 8005918:	d0a9      	beq.n	800586e <__sflush_r+0x1a>
 800591a:	0793      	lsls	r3, r2, #30
 800591c:	680e      	ldr	r6, [r1, #0]
 800591e:	bf08      	it	eq
 8005920:	694b      	ldreq	r3, [r1, #20]
 8005922:	600f      	str	r7, [r1, #0]
 8005924:	bf18      	it	ne
 8005926:	2300      	movne	r3, #0
 8005928:	eba6 0807 	sub.w	r8, r6, r7
 800592c:	608b      	str	r3, [r1, #8]
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	dd9c      	ble.n	800586e <__sflush_r+0x1a>
 8005934:	6a21      	ldr	r1, [r4, #32]
 8005936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005938:	4643      	mov	r3, r8
 800593a:	463a      	mov	r2, r7
 800593c:	4628      	mov	r0, r5
 800593e:	47b0      	blx	r6
 8005940:	2800      	cmp	r0, #0
 8005942:	dc06      	bgt.n	8005952 <__sflush_r+0xfe>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	e78e      	b.n	8005870 <__sflush_r+0x1c>
 8005952:	4407      	add	r7, r0
 8005954:	eba8 0800 	sub.w	r8, r8, r0
 8005958:	e7e9      	b.n	800592e <__sflush_r+0xda>
 800595a:	bf00      	nop
 800595c:	20400001 	.word	0x20400001

08005960 <_fflush_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	690b      	ldr	r3, [r1, #16]
 8005964:	4605      	mov	r5, r0
 8005966:	460c      	mov	r4, r1
 8005968:	b913      	cbnz	r3, 8005970 <_fflush_r+0x10>
 800596a:	2500      	movs	r5, #0
 800596c:	4628      	mov	r0, r5
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	b118      	cbz	r0, 800597a <_fflush_r+0x1a>
 8005972:	6983      	ldr	r3, [r0, #24]
 8005974:	b90b      	cbnz	r3, 800597a <_fflush_r+0x1a>
 8005976:	f000 f887 	bl	8005a88 <__sinit>
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <_fflush_r+0x6c>)
 800597c:	429c      	cmp	r4, r3
 800597e:	d11b      	bne.n	80059b8 <_fflush_r+0x58>
 8005980:	686c      	ldr	r4, [r5, #4]
 8005982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0ef      	beq.n	800596a <_fflush_r+0xa>
 800598a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800598c:	07d0      	lsls	r0, r2, #31
 800598e:	d404      	bmi.n	800599a <_fflush_r+0x3a>
 8005990:	0599      	lsls	r1, r3, #22
 8005992:	d402      	bmi.n	800599a <_fflush_r+0x3a>
 8005994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005996:	f000 f915 	bl	8005bc4 <__retarget_lock_acquire_recursive>
 800599a:	4628      	mov	r0, r5
 800599c:	4621      	mov	r1, r4
 800599e:	f7ff ff59 	bl	8005854 <__sflush_r>
 80059a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059a4:	07da      	lsls	r2, r3, #31
 80059a6:	4605      	mov	r5, r0
 80059a8:	d4e0      	bmi.n	800596c <_fflush_r+0xc>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	059b      	lsls	r3, r3, #22
 80059ae:	d4dd      	bmi.n	800596c <_fflush_r+0xc>
 80059b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059b2:	f000 f908 	bl	8005bc6 <__retarget_lock_release_recursive>
 80059b6:	e7d9      	b.n	800596c <_fflush_r+0xc>
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <_fflush_r+0x70>)
 80059ba:	429c      	cmp	r4, r3
 80059bc:	d101      	bne.n	80059c2 <_fflush_r+0x62>
 80059be:	68ac      	ldr	r4, [r5, #8]
 80059c0:	e7df      	b.n	8005982 <_fflush_r+0x22>
 80059c2:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <_fflush_r+0x74>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	bf08      	it	eq
 80059c8:	68ec      	ldreq	r4, [r5, #12]
 80059ca:	e7da      	b.n	8005982 <_fflush_r+0x22>
 80059cc:	080066a8 	.word	0x080066a8
 80059d0:	080066c8 	.word	0x080066c8
 80059d4:	08006688 	.word	0x08006688

080059d8 <std>:
 80059d8:	2300      	movs	r3, #0
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	e9c0 3300 	strd	r3, r3, [r0]
 80059e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059e6:	6083      	str	r3, [r0, #8]
 80059e8:	8181      	strh	r1, [r0, #12]
 80059ea:	6643      	str	r3, [r0, #100]	; 0x64
 80059ec:	81c2      	strh	r2, [r0, #14]
 80059ee:	6183      	str	r3, [r0, #24]
 80059f0:	4619      	mov	r1, r3
 80059f2:	2208      	movs	r2, #8
 80059f4:	305c      	adds	r0, #92	; 0x5c
 80059f6:	f7ff fdd7 	bl	80055a8 <memset>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <std+0x38>)
 80059fc:	6263      	str	r3, [r4, #36]	; 0x24
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <std+0x3c>)
 8005a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <std+0x40>)
 8005a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <std+0x44>)
 8005a08:	6224      	str	r4, [r4, #32]
 8005a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	bf00      	nop
 8005a10:	08006451 	.word	0x08006451
 8005a14:	08006473 	.word	0x08006473
 8005a18:	080064ab 	.word	0x080064ab
 8005a1c:	080064cf 	.word	0x080064cf

08005a20 <_cleanup_r>:
 8005a20:	4901      	ldr	r1, [pc, #4]	; (8005a28 <_cleanup_r+0x8>)
 8005a22:	f000 b8af 	b.w	8005b84 <_fwalk_reent>
 8005a26:	bf00      	nop
 8005a28:	08005961 	.word	0x08005961

08005a2c <__sfmoreglue>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	2268      	movs	r2, #104	; 0x68
 8005a30:	1e4d      	subs	r5, r1, #1
 8005a32:	4355      	muls	r5, r2
 8005a34:	460e      	mov	r6, r1
 8005a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a3a:	f000 f997 	bl	8005d6c <_malloc_r>
 8005a3e:	4604      	mov	r4, r0
 8005a40:	b140      	cbz	r0, 8005a54 <__sfmoreglue+0x28>
 8005a42:	2100      	movs	r1, #0
 8005a44:	e9c0 1600 	strd	r1, r6, [r0]
 8005a48:	300c      	adds	r0, #12
 8005a4a:	60a0      	str	r0, [r4, #8]
 8005a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a50:	f7ff fdaa 	bl	80055a8 <memset>
 8005a54:	4620      	mov	r0, r4
 8005a56:	bd70      	pop	{r4, r5, r6, pc}

08005a58 <__sfp_lock_acquire>:
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <__sfp_lock_acquire+0x8>)
 8005a5a:	f000 b8b3 	b.w	8005bc4 <__retarget_lock_acquire_recursive>
 8005a5e:	bf00      	nop
 8005a60:	20000987 	.word	0x20000987

08005a64 <__sfp_lock_release>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__sfp_lock_release+0x8>)
 8005a66:	f000 b8ae 	b.w	8005bc6 <__retarget_lock_release_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	20000987 	.word	0x20000987

08005a70 <__sinit_lock_acquire>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__sinit_lock_acquire+0x8>)
 8005a72:	f000 b8a7 	b.w	8005bc4 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000988 	.word	0x20000988

08005a7c <__sinit_lock_release>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__sinit_lock_release+0x8>)
 8005a7e:	f000 b8a2 	b.w	8005bc6 <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	20000988 	.word	0x20000988

08005a88 <__sinit>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	f7ff fff0 	bl	8005a70 <__sinit_lock_acquire>
 8005a90:	69a3      	ldr	r3, [r4, #24]
 8005a92:	b11b      	cbz	r3, 8005a9c <__sinit+0x14>
 8005a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a98:	f7ff bff0 	b.w	8005a7c <__sinit_lock_release>
 8005a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8005aa2:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <__sinit+0x68>)
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <__sinit+0x6c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	bf04      	itt	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	61a3      	streq	r3, [r4, #24]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f820 	bl	8005af8 <__sfp>
 8005ab8:	6060      	str	r0, [r4, #4]
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f81c 	bl	8005af8 <__sfp>
 8005ac0:	60a0      	str	r0, [r4, #8]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f818 	bl	8005af8 <__sfp>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	60e0      	str	r0, [r4, #12]
 8005acc:	2104      	movs	r1, #4
 8005ace:	6860      	ldr	r0, [r4, #4]
 8005ad0:	f7ff ff82 	bl	80059d8 <std>
 8005ad4:	68a0      	ldr	r0, [r4, #8]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	2109      	movs	r1, #9
 8005ada:	f7ff ff7d 	bl	80059d8 <std>
 8005ade:	68e0      	ldr	r0, [r4, #12]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	2112      	movs	r1, #18
 8005ae4:	f7ff ff78 	bl	80059d8 <std>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	61a3      	str	r3, [r4, #24]
 8005aec:	e7d2      	b.n	8005a94 <__sinit+0xc>
 8005aee:	bf00      	nop
 8005af0:	08006684 	.word	0x08006684
 8005af4:	08005a21 	.word	0x08005a21

08005af8 <__sfp>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	4607      	mov	r7, r0
 8005afc:	f7ff ffac 	bl	8005a58 <__sfp_lock_acquire>
 8005b00:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <__sfp+0x84>)
 8005b02:	681e      	ldr	r6, [r3, #0]
 8005b04:	69b3      	ldr	r3, [r6, #24]
 8005b06:	b913      	cbnz	r3, 8005b0e <__sfp+0x16>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7ff ffbd 	bl	8005a88 <__sinit>
 8005b0e:	3648      	adds	r6, #72	; 0x48
 8005b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	d503      	bpl.n	8005b20 <__sfp+0x28>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	b30b      	cbz	r3, 8005b60 <__sfp+0x68>
 8005b1c:	6836      	ldr	r6, [r6, #0]
 8005b1e:	e7f7      	b.n	8005b10 <__sfp+0x18>
 8005b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b24:	b9d5      	cbnz	r5, 8005b5c <__sfp+0x64>
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <__sfp+0x88>)
 8005b28:	60e3      	str	r3, [r4, #12]
 8005b2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b30:	f000 f847 	bl	8005bc2 <__retarget_lock_init_recursive>
 8005b34:	f7ff ff96 	bl	8005a64 <__sfp_lock_release>
 8005b38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b40:	6025      	str	r5, [r4, #0]
 8005b42:	61a5      	str	r5, [r4, #24]
 8005b44:	2208      	movs	r2, #8
 8005b46:	4629      	mov	r1, r5
 8005b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b4c:	f7ff fd2c 	bl	80055a8 <memset>
 8005b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b58:	4620      	mov	r0, r4
 8005b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5c:	3468      	adds	r4, #104	; 0x68
 8005b5e:	e7d9      	b.n	8005b14 <__sfp+0x1c>
 8005b60:	2104      	movs	r1, #4
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7ff ff62 	bl	8005a2c <__sfmoreglue>
 8005b68:	4604      	mov	r4, r0
 8005b6a:	6030      	str	r0, [r6, #0]
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d1d5      	bne.n	8005b1c <__sfp+0x24>
 8005b70:	f7ff ff78 	bl	8005a64 <__sfp_lock_release>
 8005b74:	230c      	movs	r3, #12
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	e7ee      	b.n	8005b58 <__sfp+0x60>
 8005b7a:	bf00      	nop
 8005b7c:	08006684 	.word	0x08006684
 8005b80:	ffff0001 	.word	0xffff0001

08005b84 <_fwalk_reent>:
 8005b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b88:	4606      	mov	r6, r0
 8005b8a:	4688      	mov	r8, r1
 8005b8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b90:	2700      	movs	r7, #0
 8005b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b96:	f1b9 0901 	subs.w	r9, r9, #1
 8005b9a:	d505      	bpl.n	8005ba8 <_fwalk_reent+0x24>
 8005b9c:	6824      	ldr	r4, [r4, #0]
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	d1f7      	bne.n	8005b92 <_fwalk_reent+0xe>
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba8:	89ab      	ldrh	r3, [r5, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d907      	bls.n	8005bbe <_fwalk_reent+0x3a>
 8005bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	d003      	beq.n	8005bbe <_fwalk_reent+0x3a>
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4630      	mov	r0, r6
 8005bba:	47c0      	blx	r8
 8005bbc:	4307      	orrs	r7, r0
 8005bbe:	3568      	adds	r5, #104	; 0x68
 8005bc0:	e7e9      	b.n	8005b96 <_fwalk_reent+0x12>

08005bc2 <__retarget_lock_init_recursive>:
 8005bc2:	4770      	bx	lr

08005bc4 <__retarget_lock_acquire_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <__retarget_lock_release_recursive>:
 8005bc6:	4770      	bx	lr

08005bc8 <__swhatbuf_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	460e      	mov	r6, r1
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	b096      	sub	sp, #88	; 0x58
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	da08      	bge.n	8005bec <__swhatbuf_r+0x24>
 8005bda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	061a      	lsls	r2, r3, #24
 8005be4:	d410      	bmi.n	8005c08 <__swhatbuf_r+0x40>
 8005be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bea:	e00e      	b.n	8005c0a <__swhatbuf_r+0x42>
 8005bec:	466a      	mov	r2, sp
 8005bee:	f000 fc95 	bl	800651c <_fstat_r>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	dbf1      	blt.n	8005bda <__swhatbuf_r+0x12>
 8005bf6:	9a01      	ldr	r2, [sp, #4]
 8005bf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c00:	425a      	negs	r2, r3
 8005c02:	415a      	adcs	r2, r3
 8005c04:	602a      	str	r2, [r5, #0]
 8005c06:	e7ee      	b.n	8005be6 <__swhatbuf_r+0x1e>
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	b016      	add	sp, #88	; 0x58
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c14 <__smakebuf_r>:
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c18:	079d      	lsls	r5, r3, #30
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d507      	bpl.n	8005c30 <__smakebuf_r+0x1c>
 8005c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6163      	str	r3, [r4, #20]
 8005c2c:	b002      	add	sp, #8
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	ab01      	add	r3, sp, #4
 8005c32:	466a      	mov	r2, sp
 8005c34:	f7ff ffc8 	bl	8005bc8 <__swhatbuf_r>
 8005c38:	9900      	ldr	r1, [sp, #0]
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f895 	bl	8005d6c <_malloc_r>
 8005c42:	b948      	cbnz	r0, 8005c58 <__smakebuf_r+0x44>
 8005c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c48:	059a      	lsls	r2, r3, #22
 8005c4a:	d4ef      	bmi.n	8005c2c <__smakebuf_r+0x18>
 8005c4c:	f023 0303 	bic.w	r3, r3, #3
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	e7e3      	b.n	8005c20 <__smakebuf_r+0xc>
 8005c58:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <__smakebuf_r+0x7c>)
 8005c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	6020      	str	r0, [r4, #0]
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	6163      	str	r3, [r4, #20]
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	6120      	str	r0, [r4, #16]
 8005c6e:	b15b      	cbz	r3, 8005c88 <__smakebuf_r+0x74>
 8005c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 fc63 	bl	8006540 <_isatty_r>
 8005c7a:	b128      	cbz	r0, 8005c88 <__smakebuf_r+0x74>
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	89a0      	ldrh	r0, [r4, #12]
 8005c8a:	4305      	orrs	r5, r0
 8005c8c:	81a5      	strh	r5, [r4, #12]
 8005c8e:	e7cd      	b.n	8005c2c <__smakebuf_r+0x18>
 8005c90:	08005a21 	.word	0x08005a21

08005c94 <_free_r>:
 8005c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c96:	2900      	cmp	r1, #0
 8005c98:	d044      	beq.n	8005d24 <_free_r+0x90>
 8005c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9e:	9001      	str	r0, [sp, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ca6:	bfb8      	it	lt
 8005ca8:	18e4      	addlt	r4, r4, r3
 8005caa:	f000 fc6b 	bl	8006584 <__malloc_lock>
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <_free_r+0x94>)
 8005cb0:	9801      	ldr	r0, [sp, #4]
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	b933      	cbnz	r3, 8005cc4 <_free_r+0x30>
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6014      	str	r4, [r2, #0]
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cc0:	f000 bc66 	b.w	8006590 <__malloc_unlock>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x46>
 8005cc8:	6825      	ldr	r5, [r4, #0]
 8005cca:	1961      	adds	r1, r4, r5
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	bf01      	itttt	eq
 8005cd0:	6819      	ldreq	r1, [r3, #0]
 8005cd2:	685b      	ldreq	r3, [r3, #4]
 8005cd4:	1949      	addeq	r1, r1, r5
 8005cd6:	6021      	streq	r1, [r4, #0]
 8005cd8:	e7ed      	b.n	8005cb6 <_free_r+0x22>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x50>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x46>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1855      	adds	r5, r2, r1
 8005ce8:	42a5      	cmp	r5, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x70>
 8005cec:	6824      	ldr	r4, [r4, #0]
 8005cee:	4421      	add	r1, r4
 8005cf0:	1854      	adds	r4, r2, r1
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1e0      	bne.n	8005cba <_free_r+0x26>
 8005cf8:	681c      	ldr	r4, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	4421      	add	r1, r4
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	e7da      	b.n	8005cba <_free_r+0x26>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x78>
 8005d06:	230c      	movs	r3, #12
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	e7d6      	b.n	8005cba <_free_r+0x26>
 8005d0c:	6825      	ldr	r5, [r4, #0]
 8005d0e:	1961      	adds	r1, r4, r5
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf04      	itt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	bf04      	itt	eq
 8005d1c:	1949      	addeq	r1, r1, r5
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	6054      	str	r4, [r2, #4]
 8005d22:	e7ca      	b.n	8005cba <_free_r+0x26>
 8005d24:	b003      	add	sp, #12
 8005d26:	bd30      	pop	{r4, r5, pc}
 8005d28:	2000098c 	.word	0x2000098c

08005d2c <sbrk_aligned>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0e      	ldr	r6, [pc, #56]	; (8005d68 <sbrk_aligned+0x3c>)
 8005d30:	460c      	mov	r4, r1
 8005d32:	6831      	ldr	r1, [r6, #0]
 8005d34:	4605      	mov	r5, r0
 8005d36:	b911      	cbnz	r1, 8005d3e <sbrk_aligned+0x12>
 8005d38:	f000 fb7a 	bl	8006430 <_sbrk_r>
 8005d3c:	6030      	str	r0, [r6, #0]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 fb75 	bl	8006430 <_sbrk_r>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	d00a      	beq.n	8005d60 <sbrk_aligned+0x34>
 8005d4a:	1cc4      	adds	r4, r0, #3
 8005d4c:	f024 0403 	bic.w	r4, r4, #3
 8005d50:	42a0      	cmp	r0, r4
 8005d52:	d007      	beq.n	8005d64 <sbrk_aligned+0x38>
 8005d54:	1a21      	subs	r1, r4, r0
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 fb6a 	bl	8006430 <_sbrk_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d101      	bne.n	8005d64 <sbrk_aligned+0x38>
 8005d60:	f04f 34ff 	mov.w	r4, #4294967295
 8005d64:	4620      	mov	r0, r4
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	20000990 	.word	0x20000990

08005d6c <_malloc_r>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	1ccd      	adds	r5, r1, #3
 8005d72:	f025 0503 	bic.w	r5, r5, #3
 8005d76:	3508      	adds	r5, #8
 8005d78:	2d0c      	cmp	r5, #12
 8005d7a:	bf38      	it	cc
 8005d7c:	250c      	movcc	r5, #12
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	4607      	mov	r7, r0
 8005d82:	db01      	blt.n	8005d88 <_malloc_r+0x1c>
 8005d84:	42a9      	cmp	r1, r5
 8005d86:	d905      	bls.n	8005d94 <_malloc_r+0x28>
 8005d88:	230c      	movs	r3, #12
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d94:	4e2e      	ldr	r6, [pc, #184]	; (8005e50 <_malloc_r+0xe4>)
 8005d96:	f000 fbf5 	bl	8006584 <__malloc_lock>
 8005d9a:	6833      	ldr	r3, [r6, #0]
 8005d9c:	461c      	mov	r4, r3
 8005d9e:	bb34      	cbnz	r4, 8005dee <_malloc_r+0x82>
 8005da0:	4629      	mov	r1, r5
 8005da2:	4638      	mov	r0, r7
 8005da4:	f7ff ffc2 	bl	8005d2c <sbrk_aligned>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	4604      	mov	r4, r0
 8005dac:	d14d      	bne.n	8005e4a <_malloc_r+0xde>
 8005dae:	6834      	ldr	r4, [r6, #0]
 8005db0:	4626      	mov	r6, r4
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d140      	bne.n	8005e38 <_malloc_r+0xcc>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	4631      	mov	r1, r6
 8005dba:	4638      	mov	r0, r7
 8005dbc:	eb04 0803 	add.w	r8, r4, r3
 8005dc0:	f000 fb36 	bl	8006430 <_sbrk_r>
 8005dc4:	4580      	cmp	r8, r0
 8005dc6:	d13a      	bne.n	8005e3e <_malloc_r+0xd2>
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	3503      	adds	r5, #3
 8005dcc:	1a6d      	subs	r5, r5, r1
 8005dce:	f025 0503 	bic.w	r5, r5, #3
 8005dd2:	3508      	adds	r5, #8
 8005dd4:	2d0c      	cmp	r5, #12
 8005dd6:	bf38      	it	cc
 8005dd8:	250c      	movcc	r5, #12
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <sbrk_aligned>
 8005de2:	3001      	adds	r0, #1
 8005de4:	d02b      	beq.n	8005e3e <_malloc_r+0xd2>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	442b      	add	r3, r5
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	e00e      	b.n	8005e0c <_malloc_r+0xa0>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	1b52      	subs	r2, r2, r5
 8005df2:	d41e      	bmi.n	8005e32 <_malloc_r+0xc6>
 8005df4:	2a0b      	cmp	r2, #11
 8005df6:	d916      	bls.n	8005e26 <_malloc_r+0xba>
 8005df8:	1961      	adds	r1, r4, r5
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	6025      	str	r5, [r4, #0]
 8005dfe:	bf18      	it	ne
 8005e00:	6059      	strne	r1, [r3, #4]
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	bf08      	it	eq
 8005e06:	6031      	streq	r1, [r6, #0]
 8005e08:	5162      	str	r2, [r4, r5]
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f104 060b 	add.w	r6, r4, #11
 8005e12:	f000 fbbd 	bl	8006590 <__malloc_unlock>
 8005e16:	f026 0607 	bic.w	r6, r6, #7
 8005e1a:	1d23      	adds	r3, r4, #4
 8005e1c:	1af2      	subs	r2, r6, r3
 8005e1e:	d0b6      	beq.n	8005d8e <_malloc_r+0x22>
 8005e20:	1b9b      	subs	r3, r3, r6
 8005e22:	50a3      	str	r3, [r4, r2]
 8005e24:	e7b3      	b.n	8005d8e <_malloc_r+0x22>
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	bf0c      	ite	eq
 8005e2c:	6032      	streq	r2, [r6, #0]
 8005e2e:	605a      	strne	r2, [r3, #4]
 8005e30:	e7ec      	b.n	8005e0c <_malloc_r+0xa0>
 8005e32:	4623      	mov	r3, r4
 8005e34:	6864      	ldr	r4, [r4, #4]
 8005e36:	e7b2      	b.n	8005d9e <_malloc_r+0x32>
 8005e38:	4634      	mov	r4, r6
 8005e3a:	6876      	ldr	r6, [r6, #4]
 8005e3c:	e7b9      	b.n	8005db2 <_malloc_r+0x46>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4638      	mov	r0, r7
 8005e44:	f000 fba4 	bl	8006590 <__malloc_unlock>
 8005e48:	e7a1      	b.n	8005d8e <_malloc_r+0x22>
 8005e4a:	6025      	str	r5, [r4, #0]
 8005e4c:	e7de      	b.n	8005e0c <_malloc_r+0xa0>
 8005e4e:	bf00      	nop
 8005e50:	2000098c 	.word	0x2000098c

08005e54 <__sfputc_r>:
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	b410      	push	{r4}
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	da08      	bge.n	8005e72 <__sfputc_r+0x1e>
 8005e60:	6994      	ldr	r4, [r2, #24]
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	db01      	blt.n	8005e6a <__sfputc_r+0x16>
 8005e66:	290a      	cmp	r1, #10
 8005e68:	d103      	bne.n	8005e72 <__sfputc_r+0x1e>
 8005e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6e:	f7ff bc31 	b.w	80056d4 <__swbuf_r>
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	1c58      	adds	r0, r3, #1
 8005e76:	6010      	str	r0, [r2, #0]
 8005e78:	7019      	strb	r1, [r3, #0]
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <__sfputs_r>:
 8005e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	18d5      	adds	r5, r2, r3
 8005e8c:	42ac      	cmp	r4, r5
 8005e8e:	d101      	bne.n	8005e94 <__sfputs_r+0x12>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e007      	b.n	8005ea4 <__sfputs_r+0x22>
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ffda 	bl	8005e54 <__sfputc_r>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d1f3      	bne.n	8005e8c <__sfputs_r+0xa>
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea8 <_vfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	460d      	mov	r5, r1
 8005eae:	b09d      	sub	sp, #116	; 0x74
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <_vfiprintf_r+0x18>
 8005eb8:	6983      	ldr	r3, [r0, #24]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x18>
 8005ebc:	f7ff fde4 	bl	8005a88 <__sinit>
 8005ec0:	4b89      	ldr	r3, [pc, #548]	; (80060e8 <_vfiprintf_r+0x240>)
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	d11b      	bne.n	8005efe <_vfiprintf_r+0x56>
 8005ec6:	6875      	ldr	r5, [r6, #4]
 8005ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_vfiprintf_r+0x32>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	059a      	lsls	r2, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_vfiprintf_r+0x32>
 8005ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed6:	f7ff fe75 	bl	8005bc4 <__retarget_lock_acquire_recursive>
 8005eda:	89ab      	ldrh	r3, [r5, #12]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	d501      	bpl.n	8005ee4 <_vfiprintf_r+0x3c>
 8005ee0:	692b      	ldr	r3, [r5, #16]
 8005ee2:	b9eb      	cbnz	r3, 8005f20 <_vfiprintf_r+0x78>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff fc46 	bl	8005778 <__swsetup_r>
 8005eec:	b1c0      	cbz	r0, 8005f20 <_vfiprintf_r+0x78>
 8005eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ef0:	07dc      	lsls	r4, r3, #31
 8005ef2:	d50e      	bpl.n	8005f12 <_vfiprintf_r+0x6a>
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b01d      	add	sp, #116	; 0x74
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	4b7b      	ldr	r3, [pc, #492]	; (80060ec <_vfiprintf_r+0x244>)
 8005f00:	429d      	cmp	r5, r3
 8005f02:	d101      	bne.n	8005f08 <_vfiprintf_r+0x60>
 8005f04:	68b5      	ldr	r5, [r6, #8]
 8005f06:	e7df      	b.n	8005ec8 <_vfiprintf_r+0x20>
 8005f08:	4b79      	ldr	r3, [pc, #484]	; (80060f0 <_vfiprintf_r+0x248>)
 8005f0a:	429d      	cmp	r5, r3
 8005f0c:	bf08      	it	eq
 8005f0e:	68f5      	ldreq	r5, [r6, #12]
 8005f10:	e7da      	b.n	8005ec8 <_vfiprintf_r+0x20>
 8005f12:	89ab      	ldrh	r3, [r5, #12]
 8005f14:	0598      	lsls	r0, r3, #22
 8005f16:	d4ed      	bmi.n	8005ef4 <_vfiprintf_r+0x4c>
 8005f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f1a:	f7ff fe54 	bl	8005bc6 <__retarget_lock_release_recursive>
 8005f1e:	e7e9      	b.n	8005ef4 <_vfiprintf_r+0x4c>
 8005f20:	2300      	movs	r3, #0
 8005f22:	9309      	str	r3, [sp, #36]	; 0x24
 8005f24:	2320      	movs	r3, #32
 8005f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f2e:	2330      	movs	r3, #48	; 0x30
 8005f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060f4 <_vfiprintf_r+0x24c>
 8005f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f38:	f04f 0901 	mov.w	r9, #1
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	469a      	mov	sl, r3
 8005f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f44:	b10a      	cbz	r2, 8005f4a <_vfiprintf_r+0xa2>
 8005f46:	2a25      	cmp	r2, #37	; 0x25
 8005f48:	d1f9      	bne.n	8005f3e <_vfiprintf_r+0x96>
 8005f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4e:	d00b      	beq.n	8005f68 <_vfiprintf_r+0xc0>
 8005f50:	465b      	mov	r3, fp
 8005f52:	4622      	mov	r2, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7ff ff93 	bl	8005e82 <__sfputs_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f000 80aa 	beq.w	80060b6 <_vfiprintf_r+0x20e>
 8005f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f64:	445a      	add	r2, fp
 8005f66:	9209      	str	r2, [sp, #36]	; 0x24
 8005f68:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80a2 	beq.w	80060b6 <_vfiprintf_r+0x20e>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f7c:	f10a 0a01 	add.w	sl, sl, #1
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	9307      	str	r3, [sp, #28]
 8005f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f88:	931a      	str	r3, [sp, #104]	; 0x68
 8005f8a:	4654      	mov	r4, sl
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f92:	4858      	ldr	r0, [pc, #352]	; (80060f4 <_vfiprintf_r+0x24c>)
 8005f94:	f7fa f93c 	bl	8000210 <memchr>
 8005f98:	9a04      	ldr	r2, [sp, #16]
 8005f9a:	b9d8      	cbnz	r0, 8005fd4 <_vfiprintf_r+0x12c>
 8005f9c:	06d1      	lsls	r1, r2, #27
 8005f9e:	bf44      	itt	mi
 8005fa0:	2320      	movmi	r3, #32
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa6:	0713      	lsls	r3, r2, #28
 8005fa8:	bf44      	itt	mi
 8005faa:	232b      	movmi	r3, #43	; 0x2b
 8005fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb6:	d015      	beq.n	8005fe4 <_vfiprintf_r+0x13c>
 8005fb8:	9a07      	ldr	r2, [sp, #28]
 8005fba:	4654      	mov	r4, sl
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f04f 0c0a 	mov.w	ip, #10
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc8:	3b30      	subs	r3, #48	; 0x30
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d94e      	bls.n	800606c <_vfiprintf_r+0x1c4>
 8005fce:	b1b0      	cbz	r0, 8005ffe <_vfiprintf_r+0x156>
 8005fd0:	9207      	str	r2, [sp, #28]
 8005fd2:	e014      	b.n	8005ffe <_vfiprintf_r+0x156>
 8005fd4:	eba0 0308 	sub.w	r3, r0, r8
 8005fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	46a2      	mov	sl, r4
 8005fe2:	e7d2      	b.n	8005f8a <_vfiprintf_r+0xe2>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	1d19      	adds	r1, r3, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	9103      	str	r1, [sp, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfbb      	ittet	lt
 8005ff0:	425b      	neglt	r3, r3
 8005ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff6:	9307      	strge	r3, [sp, #28]
 8005ff8:	9307      	strlt	r3, [sp, #28]
 8005ffa:	bfb8      	it	lt
 8005ffc:	9204      	strlt	r2, [sp, #16]
 8005ffe:	7823      	ldrb	r3, [r4, #0]
 8006000:	2b2e      	cmp	r3, #46	; 0x2e
 8006002:	d10c      	bne.n	800601e <_vfiprintf_r+0x176>
 8006004:	7863      	ldrb	r3, [r4, #1]
 8006006:	2b2a      	cmp	r3, #42	; 0x2a
 8006008:	d135      	bne.n	8006076 <_vfiprintf_r+0x1ce>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	9203      	str	r2, [sp, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfb8      	it	lt
 8006016:	f04f 33ff 	movlt.w	r3, #4294967295
 800601a:	3402      	adds	r4, #2
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006104 <_vfiprintf_r+0x25c>
 8006022:	7821      	ldrb	r1, [r4, #0]
 8006024:	2203      	movs	r2, #3
 8006026:	4650      	mov	r0, sl
 8006028:	f7fa f8f2 	bl	8000210 <memchr>
 800602c:	b140      	cbz	r0, 8006040 <_vfiprintf_r+0x198>
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	eba0 000a 	sub.w	r0, r0, sl
 8006034:	fa03 f000 	lsl.w	r0, r3, r0
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	4303      	orrs	r3, r0
 800603c:	3401      	adds	r4, #1
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006044:	482c      	ldr	r0, [pc, #176]	; (80060f8 <_vfiprintf_r+0x250>)
 8006046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800604a:	2206      	movs	r2, #6
 800604c:	f7fa f8e0 	bl	8000210 <memchr>
 8006050:	2800      	cmp	r0, #0
 8006052:	d03f      	beq.n	80060d4 <_vfiprintf_r+0x22c>
 8006054:	4b29      	ldr	r3, [pc, #164]	; (80060fc <_vfiprintf_r+0x254>)
 8006056:	bb1b      	cbnz	r3, 80060a0 <_vfiprintf_r+0x1f8>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	3307      	adds	r3, #7
 800605c:	f023 0307 	bic.w	r3, r3, #7
 8006060:	3308      	adds	r3, #8
 8006062:	9303      	str	r3, [sp, #12]
 8006064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006066:	443b      	add	r3, r7
 8006068:	9309      	str	r3, [sp, #36]	; 0x24
 800606a:	e767      	b.n	8005f3c <_vfiprintf_r+0x94>
 800606c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006070:	460c      	mov	r4, r1
 8006072:	2001      	movs	r0, #1
 8006074:	e7a5      	b.n	8005fc2 <_vfiprintf_r+0x11a>
 8006076:	2300      	movs	r3, #0
 8006078:	3401      	adds	r4, #1
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	4619      	mov	r1, r3
 800607e:	f04f 0c0a 	mov.w	ip, #10
 8006082:	4620      	mov	r0, r4
 8006084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006088:	3a30      	subs	r2, #48	; 0x30
 800608a:	2a09      	cmp	r2, #9
 800608c:	d903      	bls.n	8006096 <_vfiprintf_r+0x1ee>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0c5      	beq.n	800601e <_vfiprintf_r+0x176>
 8006092:	9105      	str	r1, [sp, #20]
 8006094:	e7c3      	b.n	800601e <_vfiprintf_r+0x176>
 8006096:	fb0c 2101 	mla	r1, ip, r1, r2
 800609a:	4604      	mov	r4, r0
 800609c:	2301      	movs	r3, #1
 800609e:	e7f0      	b.n	8006082 <_vfiprintf_r+0x1da>
 80060a0:	ab03      	add	r3, sp, #12
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	462a      	mov	r2, r5
 80060a6:	4b16      	ldr	r3, [pc, #88]	; (8006100 <_vfiprintf_r+0x258>)
 80060a8:	a904      	add	r1, sp, #16
 80060aa:	4630      	mov	r0, r6
 80060ac:	f3af 8000 	nop.w
 80060b0:	4607      	mov	r7, r0
 80060b2:	1c78      	adds	r0, r7, #1
 80060b4:	d1d6      	bne.n	8006064 <_vfiprintf_r+0x1bc>
 80060b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b8:	07d9      	lsls	r1, r3, #31
 80060ba:	d405      	bmi.n	80060c8 <_vfiprintf_r+0x220>
 80060bc:	89ab      	ldrh	r3, [r5, #12]
 80060be:	059a      	lsls	r2, r3, #22
 80060c0:	d402      	bmi.n	80060c8 <_vfiprintf_r+0x220>
 80060c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c4:	f7ff fd7f 	bl	8005bc6 <__retarget_lock_release_recursive>
 80060c8:	89ab      	ldrh	r3, [r5, #12]
 80060ca:	065b      	lsls	r3, r3, #25
 80060cc:	f53f af12 	bmi.w	8005ef4 <_vfiprintf_r+0x4c>
 80060d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060d2:	e711      	b.n	8005ef8 <_vfiprintf_r+0x50>
 80060d4:	ab03      	add	r3, sp, #12
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	462a      	mov	r2, r5
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <_vfiprintf_r+0x258>)
 80060dc:	a904      	add	r1, sp, #16
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 f880 	bl	80061e4 <_printf_i>
 80060e4:	e7e4      	b.n	80060b0 <_vfiprintf_r+0x208>
 80060e6:	bf00      	nop
 80060e8:	080066a8 	.word	0x080066a8
 80060ec:	080066c8 	.word	0x080066c8
 80060f0:	08006688 	.word	0x08006688
 80060f4:	080066e8 	.word	0x080066e8
 80060f8:	080066f2 	.word	0x080066f2
 80060fc:	00000000 	.word	0x00000000
 8006100:	08005e83 	.word	0x08005e83
 8006104:	080066ee 	.word	0x080066ee

08006108 <_printf_common>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	4616      	mov	r6, r2
 800610e:	4699      	mov	r9, r3
 8006110:	688a      	ldr	r2, [r1, #8]
 8006112:	690b      	ldr	r3, [r1, #16]
 8006114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006118:	4293      	cmp	r3, r2
 800611a:	bfb8      	it	lt
 800611c:	4613      	movlt	r3, r2
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006124:	4607      	mov	r7, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b10a      	cbz	r2, 800612e <_printf_common+0x26>
 800612a:	3301      	adds	r3, #1
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	0699      	lsls	r1, r3, #26
 8006132:	bf42      	ittt	mi
 8006134:	6833      	ldrmi	r3, [r6, #0]
 8006136:	3302      	addmi	r3, #2
 8006138:	6033      	strmi	r3, [r6, #0]
 800613a:	6825      	ldr	r5, [r4, #0]
 800613c:	f015 0506 	ands.w	r5, r5, #6
 8006140:	d106      	bne.n	8006150 <_printf_common+0x48>
 8006142:	f104 0a19 	add.w	sl, r4, #25
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	6832      	ldr	r2, [r6, #0]
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc26      	bgt.n	800619e <_printf_common+0x96>
 8006150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006154:	1e13      	subs	r3, r2, #0
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	bf18      	it	ne
 800615a:	2301      	movne	r3, #1
 800615c:	0692      	lsls	r2, r2, #26
 800615e:	d42b      	bmi.n	80061b8 <_printf_common+0xb0>
 8006160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d01e      	beq.n	80061ac <_printf_common+0xa4>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	68e5      	ldr	r5, [r4, #12]
 8006172:	6832      	ldr	r2, [r6, #0]
 8006174:	f003 0306 	and.w	r3, r3, #6
 8006178:	2b04      	cmp	r3, #4
 800617a:	bf08      	it	eq
 800617c:	1aad      	subeq	r5, r5, r2
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	bf0c      	ite	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	2500      	movne	r5, #0
 800618a:	4293      	cmp	r3, r2
 800618c:	bfc4      	itt	gt
 800618e:	1a9b      	subgt	r3, r3, r2
 8006190:	18ed      	addgt	r5, r5, r3
 8006192:	2600      	movs	r6, #0
 8006194:	341a      	adds	r4, #26
 8006196:	42b5      	cmp	r5, r6
 8006198:	d11a      	bne.n	80061d0 <_printf_common+0xc8>
 800619a:	2000      	movs	r0, #0
 800619c:	e008      	b.n	80061b0 <_printf_common+0xa8>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4649      	mov	r1, r9
 80061a4:	4638      	mov	r0, r7
 80061a6:	47c0      	blx	r8
 80061a8:	3001      	adds	r0, #1
 80061aa:	d103      	bne.n	80061b4 <_printf_common+0xac>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	3501      	adds	r5, #1
 80061b6:	e7c6      	b.n	8006146 <_printf_common+0x3e>
 80061b8:	18e1      	adds	r1, r4, r3
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	2030      	movs	r0, #48	; 0x30
 80061be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061c2:	4422      	add	r2, r4
 80061c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061cc:	3302      	adds	r3, #2
 80061ce:	e7c7      	b.n	8006160 <_printf_common+0x58>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4622      	mov	r2, r4
 80061d4:	4649      	mov	r1, r9
 80061d6:	4638      	mov	r0, r7
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d0e6      	beq.n	80061ac <_printf_common+0xa4>
 80061de:	3601      	adds	r6, #1
 80061e0:	e7d9      	b.n	8006196 <_printf_common+0x8e>
	...

080061e4 <_printf_i>:
 80061e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	7e0f      	ldrb	r7, [r1, #24]
 80061ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061ec:	2f78      	cmp	r7, #120	; 0x78
 80061ee:	4691      	mov	r9, r2
 80061f0:	4680      	mov	r8, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	469a      	mov	sl, r3
 80061f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061fa:	d807      	bhi.n	800620c <_printf_i+0x28>
 80061fc:	2f62      	cmp	r7, #98	; 0x62
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x32>
 8006200:	2f00      	cmp	r7, #0
 8006202:	f000 80d8 	beq.w	80063b6 <_printf_i+0x1d2>
 8006206:	2f58      	cmp	r7, #88	; 0x58
 8006208:	f000 80a3 	beq.w	8006352 <_printf_i+0x16e>
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006214:	e03a      	b.n	800628c <_printf_i+0xa8>
 8006216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800621a:	2b15      	cmp	r3, #21
 800621c:	d8f6      	bhi.n	800620c <_printf_i+0x28>
 800621e:	a101      	add	r1, pc, #4	; (adr r1, 8006224 <_printf_i+0x40>)
 8006220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006291 	.word	0x08006291
 800622c:	0800620d 	.word	0x0800620d
 8006230:	0800620d 	.word	0x0800620d
 8006234:	0800620d 	.word	0x0800620d
 8006238:	0800620d 	.word	0x0800620d
 800623c:	08006291 	.word	0x08006291
 8006240:	0800620d 	.word	0x0800620d
 8006244:	0800620d 	.word	0x0800620d
 8006248:	0800620d 	.word	0x0800620d
 800624c:	0800620d 	.word	0x0800620d
 8006250:	0800639d 	.word	0x0800639d
 8006254:	080062c1 	.word	0x080062c1
 8006258:	0800637f 	.word	0x0800637f
 800625c:	0800620d 	.word	0x0800620d
 8006260:	0800620d 	.word	0x0800620d
 8006264:	080063bf 	.word	0x080063bf
 8006268:	0800620d 	.word	0x0800620d
 800626c:	080062c1 	.word	0x080062c1
 8006270:	0800620d 	.word	0x0800620d
 8006274:	0800620d 	.word	0x0800620d
 8006278:	08006387 	.word	0x08006387
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	602a      	str	r2, [r5, #0]
 8006284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800628c:	2301      	movs	r3, #1
 800628e:	e0a3      	b.n	80063d8 <_printf_i+0x1f4>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	6829      	ldr	r1, [r5, #0]
 8006294:	0606      	lsls	r6, r0, #24
 8006296:	f101 0304 	add.w	r3, r1, #4
 800629a:	d50a      	bpl.n	80062b2 <_printf_i+0xce>
 800629c:	680e      	ldr	r6, [r1, #0]
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	da03      	bge.n	80062ac <_printf_i+0xc8>
 80062a4:	232d      	movs	r3, #45	; 0x2d
 80062a6:	4276      	negs	r6, r6
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ac:	485e      	ldr	r0, [pc, #376]	; (8006428 <_printf_i+0x244>)
 80062ae:	230a      	movs	r3, #10
 80062b0:	e019      	b.n	80062e6 <_printf_i+0x102>
 80062b2:	680e      	ldr	r6, [r1, #0]
 80062b4:	602b      	str	r3, [r5, #0]
 80062b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062ba:	bf18      	it	ne
 80062bc:	b236      	sxthne	r6, r6
 80062be:	e7ef      	b.n	80062a0 <_printf_i+0xbc>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	6820      	ldr	r0, [r4, #0]
 80062c4:	1d19      	adds	r1, r3, #4
 80062c6:	6029      	str	r1, [r5, #0]
 80062c8:	0601      	lsls	r1, r0, #24
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0xec>
 80062cc:	681e      	ldr	r6, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0xf2>
 80062d0:	0646      	lsls	r6, r0, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0xe8>
 80062d4:	881e      	ldrh	r6, [r3, #0]
 80062d6:	4854      	ldr	r0, [pc, #336]	; (8006428 <_printf_i+0x244>)
 80062d8:	2f6f      	cmp	r7, #111	; 0x6f
 80062da:	bf0c      	ite	eq
 80062dc:	2308      	moveq	r3, #8
 80062de:	230a      	movne	r3, #10
 80062e0:	2100      	movs	r1, #0
 80062e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e6:	6865      	ldr	r5, [r4, #4]
 80062e8:	60a5      	str	r5, [r4, #8]
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	bfa2      	ittt	ge
 80062ee:	6821      	ldrge	r1, [r4, #0]
 80062f0:	f021 0104 	bicge.w	r1, r1, #4
 80062f4:	6021      	strge	r1, [r4, #0]
 80062f6:	b90e      	cbnz	r6, 80062fc <_printf_i+0x118>
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d04d      	beq.n	8006398 <_printf_i+0x1b4>
 80062fc:	4615      	mov	r5, r2
 80062fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006302:	fb03 6711 	mls	r7, r3, r1, r6
 8006306:	5dc7      	ldrb	r7, [r0, r7]
 8006308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800630c:	4637      	mov	r7, r6
 800630e:	42bb      	cmp	r3, r7
 8006310:	460e      	mov	r6, r1
 8006312:	d9f4      	bls.n	80062fe <_printf_i+0x11a>
 8006314:	2b08      	cmp	r3, #8
 8006316:	d10b      	bne.n	8006330 <_printf_i+0x14c>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	07de      	lsls	r6, r3, #31
 800631c:	d508      	bpl.n	8006330 <_printf_i+0x14c>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	6861      	ldr	r1, [r4, #4]
 8006322:	4299      	cmp	r1, r3
 8006324:	bfde      	ittt	le
 8006326:	2330      	movle	r3, #48	; 0x30
 8006328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800632c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006330:	1b52      	subs	r2, r2, r5
 8006332:	6122      	str	r2, [r4, #16]
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	464b      	mov	r3, r9
 800633a:	aa03      	add	r2, sp, #12
 800633c:	4621      	mov	r1, r4
 800633e:	4640      	mov	r0, r8
 8006340:	f7ff fee2 	bl	8006108 <_printf_common>
 8006344:	3001      	adds	r0, #1
 8006346:	d14c      	bne.n	80063e2 <_printf_i+0x1fe>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b004      	add	sp, #16
 800634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006352:	4835      	ldr	r0, [pc, #212]	; (8006428 <_printf_i+0x244>)
 8006354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006358:	6829      	ldr	r1, [r5, #0]
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006360:	6029      	str	r1, [r5, #0]
 8006362:	061d      	lsls	r5, r3, #24
 8006364:	d514      	bpl.n	8006390 <_printf_i+0x1ac>
 8006366:	07df      	lsls	r7, r3, #31
 8006368:	bf44      	itt	mi
 800636a:	f043 0320 	orrmi.w	r3, r3, #32
 800636e:	6023      	strmi	r3, [r4, #0]
 8006370:	b91e      	cbnz	r6, 800637a <_printf_i+0x196>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f023 0320 	bic.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	2310      	movs	r3, #16
 800637c:	e7b0      	b.n	80062e0 <_printf_i+0xfc>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	2378      	movs	r3, #120	; 0x78
 8006388:	4828      	ldr	r0, [pc, #160]	; (800642c <_printf_i+0x248>)
 800638a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800638e:	e7e3      	b.n	8006358 <_printf_i+0x174>
 8006390:	0659      	lsls	r1, r3, #25
 8006392:	bf48      	it	mi
 8006394:	b2b6      	uxthmi	r6, r6
 8006396:	e7e6      	b.n	8006366 <_printf_i+0x182>
 8006398:	4615      	mov	r5, r2
 800639a:	e7bb      	b.n	8006314 <_printf_i+0x130>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	6826      	ldr	r6, [r4, #0]
 80063a0:	6961      	ldr	r1, [r4, #20]
 80063a2:	1d18      	adds	r0, r3, #4
 80063a4:	6028      	str	r0, [r5, #0]
 80063a6:	0635      	lsls	r5, r6, #24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0x1cc>
 80063ac:	6019      	str	r1, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0x1d2>
 80063b0:	0670      	lsls	r0, r6, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0x1c8>
 80063b4:	8019      	strh	r1, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	4615      	mov	r5, r2
 80063bc:	e7ba      	b.n	8006334 <_printf_i+0x150>
 80063be:	682b      	ldr	r3, [r5, #0]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	602a      	str	r2, [r5, #0]
 80063c4:	681d      	ldr	r5, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7f9 ff20 	bl	8000210 <memchr>
 80063d0:	b108      	cbz	r0, 80063d6 <_printf_i+0x1f2>
 80063d2:	1b40      	subs	r0, r0, r5
 80063d4:	6060      	str	r0, [r4, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e0:	e7a8      	b.n	8006334 <_printf_i+0x150>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	462a      	mov	r2, r5
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0ab      	beq.n	8006348 <_printf_i+0x164>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	079b      	lsls	r3, r3, #30
 80063f4:	d413      	bmi.n	800641e <_printf_i+0x23a>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	4298      	cmp	r0, r3
 80063fc:	bfb8      	it	lt
 80063fe:	4618      	movlt	r0, r3
 8006400:	e7a4      	b.n	800634c <_printf_i+0x168>
 8006402:	2301      	movs	r3, #1
 8006404:	4632      	mov	r2, r6
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d09b      	beq.n	8006348 <_printf_i+0x164>
 8006410:	3501      	adds	r5, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	9903      	ldr	r1, [sp, #12]
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	42ab      	cmp	r3, r5
 800641a:	dcf2      	bgt.n	8006402 <_printf_i+0x21e>
 800641c:	e7eb      	b.n	80063f6 <_printf_i+0x212>
 800641e:	2500      	movs	r5, #0
 8006420:	f104 0619 	add.w	r6, r4, #25
 8006424:	e7f5      	b.n	8006412 <_printf_i+0x22e>
 8006426:	bf00      	nop
 8006428:	080066f9 	.word	0x080066f9
 800642c:	0800670a 	.word	0x0800670a

08006430 <_sbrk_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d06      	ldr	r5, [pc, #24]	; (800644c <_sbrk_r+0x1c>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa fe48 	bl	80010d0 <_sbrk>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_sbrk_r+0x1a>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_sbrk_r+0x1a>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20000994 	.word	0x20000994

08006450 <__sread>:
 8006450:	b510      	push	{r4, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	f000 f8a0 	bl	800659c <_read_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	bfab      	itete	ge
 8006460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006462:	89a3      	ldrhlt	r3, [r4, #12]
 8006464:	181b      	addge	r3, r3, r0
 8006466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800646a:	bfac      	ite	ge
 800646c:	6563      	strge	r3, [r4, #84]	; 0x54
 800646e:	81a3      	strhlt	r3, [r4, #12]
 8006470:	bd10      	pop	{r4, pc}

08006472 <__swrite>:
 8006472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006476:	461f      	mov	r7, r3
 8006478:	898b      	ldrh	r3, [r1, #12]
 800647a:	05db      	lsls	r3, r3, #23
 800647c:	4605      	mov	r5, r0
 800647e:	460c      	mov	r4, r1
 8006480:	4616      	mov	r6, r2
 8006482:	d505      	bpl.n	8006490 <__swrite+0x1e>
 8006484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006488:	2302      	movs	r3, #2
 800648a:	2200      	movs	r2, #0
 800648c:	f000 f868 	bl	8006560 <_lseek_r>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	4632      	mov	r2, r6
 800649e:	463b      	mov	r3, r7
 80064a0:	4628      	mov	r0, r5
 80064a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a6:	f000 b817 	b.w	80064d8 <_write_r>

080064aa <__sseek>:
 80064aa:	b510      	push	{r4, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 f855 	bl	8006560 <_lseek_r>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	bf15      	itete	ne
 80064bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80064be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064c6:	81a3      	strheq	r3, [r4, #12]
 80064c8:	bf18      	it	ne
 80064ca:	81a3      	strhne	r3, [r4, #12]
 80064cc:	bd10      	pop	{r4, pc}

080064ce <__sclose>:
 80064ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d2:	f000 b813 	b.w	80064fc <_close_r>
	...

080064d8 <_write_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	; (80064f8 <_write_r+0x20>)
 80064dc:	4604      	mov	r4, r0
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	602a      	str	r2, [r5, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f7fe ffd0 	bl	800548c <_write>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_write_r+0x1e>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_write_r+0x1e>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	20000994 	.word	0x20000994

080064fc <_close_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	; (8006518 <_close_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fa fdae 	bl	8001068 <_close>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_close_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_close_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20000994 	.word	0x20000994

0800651c <_fstat_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	; (800653c <_fstat_r+0x20>)
 8006520:	2300      	movs	r3, #0
 8006522:	4604      	mov	r4, r0
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	f7fa fda9 	bl	8001080 <_fstat>
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	d102      	bne.n	8006538 <_fstat_r+0x1c>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	b103      	cbz	r3, 8006538 <_fstat_r+0x1c>
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	bd38      	pop	{r3, r4, r5, pc}
 800653a:	bf00      	nop
 800653c:	20000994 	.word	0x20000994

08006540 <_isatty_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d06      	ldr	r5, [pc, #24]	; (800655c <_isatty_r+0x1c>)
 8006544:	2300      	movs	r3, #0
 8006546:	4604      	mov	r4, r0
 8006548:	4608      	mov	r0, r1
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	f7fa fda8 	bl	80010a0 <_isatty>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_isatty_r+0x1a>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_isatty_r+0x1a>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	20000994 	.word	0x20000994

08006560 <_lseek_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4d07      	ldr	r5, [pc, #28]	; (8006580 <_lseek_r+0x20>)
 8006564:	4604      	mov	r4, r0
 8006566:	4608      	mov	r0, r1
 8006568:	4611      	mov	r1, r2
 800656a:	2200      	movs	r2, #0
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	f7fa fda1 	bl	80010b6 <_lseek>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <_lseek_r+0x1e>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	b103      	cbz	r3, 800657e <_lseek_r+0x1e>
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	20000994 	.word	0x20000994

08006584 <__malloc_lock>:
 8006584:	4801      	ldr	r0, [pc, #4]	; (800658c <__malloc_lock+0x8>)
 8006586:	f7ff bb1d 	b.w	8005bc4 <__retarget_lock_acquire_recursive>
 800658a:	bf00      	nop
 800658c:	20000986 	.word	0x20000986

08006590 <__malloc_unlock>:
 8006590:	4801      	ldr	r0, [pc, #4]	; (8006598 <__malloc_unlock+0x8>)
 8006592:	f7ff bb18 	b.w	8005bc6 <__retarget_lock_release_recursive>
 8006596:	bf00      	nop
 8006598:	20000986 	.word	0x20000986

0800659c <_read_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	; (80065bc <_read_r+0x20>)
 80065a0:	4604      	mov	r4, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fe ff84 	bl	80054b8 <_read>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_read_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_read_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000994 	.word	0x20000994

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
